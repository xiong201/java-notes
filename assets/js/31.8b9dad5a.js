(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{360:function(v,t,_){"use strict";_.r(t);var a=_(7),s=Object(a.a)({},(function(){var v=this,t=v._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("p",[v._v("JVM参数主要分为以下三种： "),t("strong",[v._v("标准参数")]),v._v("、"),t("strong",[v._v("非标准参数")]),v._v("、"),t("strong",[v._v("不稳定参数")]),v._v("。")]),v._v(" "),t("h1",{attrs:{id:"标准参数、非标准参数、不稳定参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准参数、非标准参数、不稳定参"}},[v._v("#")]),v._v(" 标准参数、非标准参数、不稳定参")]),v._v(" "),t("h2",{attrs:{id:"标准参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准参数"}},[v._v("#")]),v._v(" 标准参数")]),v._v(" "),t("p",[v._v("标准参数，顾名思义，标准参数中包括功能以及输出的结果都是很稳定的，基本上 不会随着JVM版本的"),t("strong",[v._v("变化而变化")]),v._v(" 。标准参数以 "),t("strong",[v._v("-")]),v._v(" 开头，如：java -version、java -jar等，通过java -help可以查询所有的标准参数，")]),v._v(" "),t("p",[v._v("我们可以通过 -help 命令来检索出所有标准参数")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406083140244.png",alt:"image-20230406083140244"}})]),v._v(" "),t("blockquote",[t("p",[v._v("-help 也是一个标准参数，再比如使用比较多的 -version也是。")])]),v._v(" "),t("h2",{attrs:{id:"非标准参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非标准参数"}},[v._v("#")]),v._v(" 非标准参数")]),v._v(" "),t("p",[v._v("非标准参数以 "),t("strong",[v._v("-X")]),v._v(" 开头，是标准参数的扩展。对应前面讲的标准化参数，这是非标准化参数。")]),v._v(" "),t("p",[v._v("表示在将来的JVM版本中可能会发生改变，但是这类以-X开始的参数变化的比较小。")]),v._v(" "),t("p",[v._v("我们可以通过 Java -X 命令来检索所有-X 参数。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406083337869.png",alt:"image-20230406083337869"}})]),v._v(" "),t("p",[v._v("我们可以通过设置非标准参数来配置堆的内存分配，常用的非标准参数有：")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("-Xms")]),v._v(" 堆内存的最小值：默认值是总内存/64（且小于1G），默认情况下，当堆中可用内存小于40%时，堆内存会开始增加，一直增加到-Xmx的大小。")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("-Xmx")]),v._v(" 堆内存的最大值：默认值是总内存/64（且小于1G），如果Xms和Xmx都不设置，则两者大小会相同，默认情况下，当堆中可用内存大于70%时，堆内存会开始减少，一直减小到-Xms的大小；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("-Xmn")]),v._v(" 新生代内存的最大值：包括Eden区和两个Survivor区的总和，写法如：-Xmn1024m")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("-Xss")]),v._v(" 每个线程的栈内存： 默认1M，一般来说是不需要改的。"),t("strong",[v._v("(比较少用)")])])])]),v._v(" "),t("h2",{attrs:{id:"不稳定参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不稳定参数"}},[v._v("#")]),v._v(" 不稳定参数")]),v._v(" "),t("p",[v._v("这是我们日常开发中接触到最多的参数类型。这也是非标准化参数，相对来说不稳定，随着JVM版本的变化可能会发生变化，主要用于 "),t("strong",[v._v("JVM调优")]),v._v(" 和 "),t("strong",[v._v("debug")]),v._v("。")]),v._v(" "),t("p",[v._v("不稳定参数以-XX 开头，此类参数的设置很容易引起JVM 性能上的差异，使JVM存在极大的不稳定性。")]),v._v(" "),t("p",[v._v("如果此类参数设置合理将大大提高JVM的性能及稳定性。")]),v._v(" "),t("p",[v._v("不稳定参数分为三类：")]),v._v(" "),t("ul",[t("li",[v._v("性能参数：用于JVM的性能调优和内存分配控制，如内存大小的设置；")]),v._v(" "),t("li",[v._v("行为参数：用于改变JVM的基础行为，如GC的方式和算法的选择；")]),v._v(" "),t("li",[v._v("调试参数：用于监控、打印、输出jvm的信息；")])]),v._v(" "),t("p",[t("strong",[v._v("不稳定参数语法规则：")])]),v._v(" "),t("ol",[t("li",[v._v("布尔类型参数值：\n"),t("ul",[t("li",[v._v("-XX:+")]),v._v(" "),t("li",[v._v("-XX:-")])])])]),v._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[v._v("示例：-XX:+UseG1GC：表示启用G1垃圾收集器\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[v._v("数字类型参数值：\n"),t("ul",[t("li",[v._v("-XX:=")])])])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("示例：-XX:MaxGCPauseMillis=500 ：表示设置GC的最大停顿时间是500ms\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[v._v("字符串类型参数值：\n"),t("ul",[t("li",[v._v("-XX:=")])])])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("示例：-XX:HeapDumpPath=./dump.core\n")])])]),t("h1",{attrs:{id:"常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用参数"}},[v._v("#")]),v._v(" 常用参数")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("参数名称")]),v._v(" "),t("th",[v._v("含义")]),v._v(" "),t("th",[v._v("默认值")]),v._v(" "),t("th")])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("-Xms")]),v._v(" "),t("td",[v._v("初始堆大小")]),v._v(" "),t("td",[v._v("物理内存的1/64(<1GB)")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-Xmx")]),v._v(" "),t("td",[v._v("最大堆大小")]),v._v(" "),t("td",[v._v("物理内存的1/4(<1GB")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-Xmn")]),v._v(" "),t("td",[v._v("年轻代大小")]),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:NewSize")]),v._v(" "),t("td",[v._v("设置年轻代大小")]),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:MaxNewSize")]),v._v(" "),t("td",[v._v("年轻代最大值")]),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:PermSize")]),v._v(" "),t("td",[v._v("设置持久代(perm gen)初始值")]),v._v(" "),t("td",[v._v("物理内存的1/64")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:MaxPermSize")]),v._v(" "),t("td",[v._v("设置持久代最大值")]),v._v(" "),t("td",[v._v("物理内存的1/4")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-Xss")]),v._v(" "),t("td",[v._v("每个线程的堆栈大小")]),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:ThreadStackSize")]),v._v(" "),t("td",[v._v("线程堆栈大小")]),v._v(" "),t("td"),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:NewRatio")]),v._v(" "),t("td",[v._v("年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)")]),v._v(" "),t("td"),v._v(" "),t("td",[v._v("-XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5，Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。")])]),v._v(" "),t("tr",[t("td",[v._v("-XX:SurvivorRatio")]),v._v(" "),t("td",[v._v("Eden区与Survivor区的大小比值")]),v._v(" "),t("td"),v._v(" "),t("td",[v._v("设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10")])])])]),v._v(" "),t("h2",{attrs:{id:"并行收集器相关参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行收集器相关参数"}},[v._v("#")]),v._v(" 并行收集器相关参数")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("参数名称")]),v._v(" "),t("th",[v._v("含义")]),v._v(" "),t("th",[v._v("默认值")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("-XX:+UseParallelGC")]),v._v(" "),t("td",[v._v("Full GC采用parallelMSC")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:+UseParNewGC")]),v._v(" "),t("td",[v._v("设置年轻代为并行收集")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:ParallelGCThreads")]),v._v(" "),t("td",[v._v("并行收集器的线程数")]),v._v(" "),t("td")]),v._v(" "),t("tr",[t("td",[v._v("-XX:+UseParallelOldGC")]),v._v(" "),t("td",[v._v("年老代垃圾收集方式为并行收集(Parallel Compacting)")]),v._v(" "),t("td")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);