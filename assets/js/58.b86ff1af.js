(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{388:function(a,t,s){"use strict";s.r(t);var e=s(7),n=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),t("h1",{attrs:{id:"基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[a._v("#")]),a._v(" 基础")]),a._v(" "),t("h2",{attrs:{id:"什么是线程和进程-线程与进程的关系-区别及优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程和进程-线程与进程的关系-区别及优缺点"}},[a._v("#")]),a._v(" 什么是线程和进程？线程与进程的关系，区别及优缺点？")]),a._v(" "),t("p",[a._v("进程是程序的一次执行过程，是系统运行程序的基本单位。系统运行一个程序就是一个进程从创建，运行到消亡的过程。线程是一个进程更小的执行单位。一个进程在执行过程中可以产生多个线程。 多个线程共享进程的"),t("strong",[a._v("堆")]),a._v("和"),t("strong",[a._v("方法区 (JDK1.8 之后的元空间)资源，但是每个线程有自己的程序计数器")]),a._v("、"),t("strong",[a._v("虚拟机栈")]),a._v(" 和 "),t("strong",[a._v("本地方法栈")]),a._v("。"),t("br"),a._v("\n进程是独立的，而线程则不一定，因为同一进程中线程可能会相互影响。"),t("strong",[a._v("线程执行开销小，但不利于资源的管理和保护；而进程正相反。")])]),a._v(" "),t("h2",{attrs:{id:"为什么要使用多线程呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用多线程呢"}},[a._v("#")]),a._v(" 为什么要使用多线程呢")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("从计算机底层来说：")]),a._v(" 线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。")]),a._v(" "),t("li",[t("strong",[a._v("从当代互联网发展趋势来说：")]),a._v(" 现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能。")])]),a._v(" "),t("h2",{attrs:{id:"说说线程的生命周期和状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说说线程的生命周期和状态"}},[a._v("#")]),a._v(" 说说线程的生命周期和状态")]),a._v(" "),t("p",[a._v("Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("NEW")]),a._v(": 初始状态，线程被创建出来但没有被调用 start() 。")]),a._v(" "),t("li",[t("strong",[a._v("RUNNABLE")]),a._v(": 运行状态，线程被调用了 start()等待运行的状态。")]),a._v(" "),t("li",[t("strong",[a._v("BLOCKED")]),a._v(" ：阻塞状态，需要等待锁释放。")]),a._v(" "),t("li",[t("strong",[a._v("WAITING")]),a._v("：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。")]),a._v(" "),t("li",[t("strong",[a._v("TIME_WAITING")]),a._v("：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。")]),a._v(" "),t("li",[t("strong",[a._v("TERMINATED")]),a._v("：终止状态，表示该线程已经运行完毕。")])]),a._v(" "),t("p",[a._v("线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。")]),a._v(" "),t("h1",{attrs:{id:"java-中有哪些锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中有哪些锁"}},[a._v("#")]),a._v(" Java 中有哪些锁？")]),a._v(" "),t("p",[a._v("Java 中锁可以分：")]),a._v(" "),t("ul",[t("li",[a._v("悲观锁/乐观锁")]),a._v(" "),t("li",[a._v("共享锁/独占锁")]),a._v(" "),t("li",[a._v("公平锁/非公平锁")]),a._v(" "),t("li",[a._v("可中断锁/非可中断锁")]),a._v(" "),t("li",[a._v("可重入锁/不可重入锁")]),a._v(" "),t("li",[a._v("自旋锁/非自旋锁")])]),a._v(" "),t("h2",{attrs:{id:"什么是线程死锁-如何预防和避免线程死锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程死锁-如何预防和避免线程死锁"}},[a._v("#")]),a._v(" 什么是线程死锁？如何预防和避免线程死锁")]),a._v(" "),t("p",[a._v("线程死锁就是多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期阻塞，因此程序不能正常终止。")]),a._v(" "),t("p",[a._v("产生死锁需要满足四个必要条件：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("互斥条件")]),a._v("：该资源任意一个时刻只由一个线程占用。")]),a._v(" "),t("li",[t("strong",[a._v("请求与保持条件")]),a._v("：一个进程因请求资源而阻塞时，对已获得的资源保持不放。")]),a._v(" "),t("li",[t("strong",[a._v("不剥夺条件")]),a._v(":线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。")]),a._v(" "),t("li",[t("strong",[a._v("循环等待条件")]),a._v(":若干进程之间形成一种头尾相接的循环等待资源关系。")])]),a._v(" "),t("p",[a._v("要避免线程死锁，只要破坏死锁产生的必要条件就可以：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("破坏请求与保持条件")]),a._v(" ：一次性申请所有的资源。")]),a._v(" "),t("li",[t("strong",[a._v("破坏不剥夺条件")]),a._v(" ：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。")]),a._v(" "),t("li",[t("strong",[a._v("破坏循环等待条件")]),a._v(" ：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。")])]),a._v(" "),t("h1",{attrs:{id:"乐观锁和悲观锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁和悲观锁"}},[a._v("#")]),a._v(" 乐观锁和悲观锁")]),a._v(" "),t("h2",{attrs:{id:"乐观锁和悲观锁的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁和悲观锁的区别"}},[a._v("#")]),a._v(" 乐观锁和悲观锁的区别")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("乐观锁通常用多于写比较少的情况下（多读场景），避免频繁加锁影响性能，大大提升了系统的吞吐量。")])]),a._v(" "),t("li",[t("strong",[a._v("悲观锁通常多用于写多比较多的情况下（多写场景），避免频繁失败和重试影响性能。")])])]),a._v(" "),t("h2",{attrs:{id:"如何实现乐观锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现乐观锁"}},[a._v("#")]),a._v(" 如何实现乐观锁")]),a._v(" "),t("p",[a._v("乐观锁一般会使用版本号机制或 CAS 算法实现，CAS 算法相对来说更多一些。")]),a._v(" "),t("h2",{attrs:{id:"cas了解么-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cas了解么-原理"}},[a._v("#")]),a._v(" CAS了解么？原理？")]),a._v(" "),t("p",[a._v("CAS 的全称是 "),t("strong",[a._v("Compare And Swap（比较与交换）")]),a._v(" ，用于实现乐观锁，被广泛应用于各大框架中。CAS 的思想很简单，就是用一个预期值和要更新的变量值进行比较，两值相等才会进行更新。\nCAS 是一个原子操作，底层依赖于一条 CPU 的原子指令。\n"),t("strong",[a._v("原子操作")]),a._v(" 即最小不可拆分的操作，也就是说操作一旦开始，就不能被打断，直到操作完成。\nCAS 涉及到三个操作数：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("V")]),a._v(" ：要更新的变量值(Var)")]),a._v(" "),t("li",[t("strong",[a._v("E")]),a._v(" ：预期值(Expected)")]),a._v(" "),t("li",[t("strong",[a._v("N")]),a._v(" ：拟写入的新值(New)")])]),a._v(" "),t("p",[a._v("当且仅当 V 的值等于 E 时，CAS 通过原子方式用新值 N 来更新 V 的值。如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新。\n"),t("strong",[a._v("举一个简单的例子")]),a._v(" ：线程 A 要修改变量 i 的值为 6，i 原值为 1（V = 1，E=1，N=6，假设不存在 ABA 问题）。")]),a._v(" "),t("ol",[t("li",[a._v("i 与 1 进行比较，如果相等， 则说明没被其他线程修改，可以被设置为 6 。")]),a._v(" "),t("li",[a._v("i 与 1 进行比较，如果不相等，则说明被其他线程修改，当前线程放弃更新，CAS 操作失败。")])]),a._v(" "),t("p",[a._v("当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。\nJava 语言并没有直接实现 CAS，CAS 相关的实现是通过 C++ 内联汇编的形式实现的（JNI 调用）。因此， CAS 的具体实现和操作系统以及 CPU 都有关系。")]),a._v(" "),t("h2",{attrs:{id:"乐观锁存在哪些问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁存在哪些问题"}},[a._v("#")]),a._v(" 乐观锁存在哪些问题")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("ABA问题")]),a._v("：一个变量V初始值是A，期间被改为其他值，然后又改回A，那么CAS操作就会误认为它从来没被修改过，这就是ABA问题。解决办法是在变量前面追加上版本号和时间戳。")]),a._v(" "),t("li",[t("strong",[a._v("循环时间长开销大")]),a._v("： CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。")]),a._v(" "),t("li",[t("strong",[a._v("只能保证一个共享变量的原子操作")]),a._v("： CAS 只对单个共享变量有效，当操作涉及跨多个共享变量时 CAS 无效。但是从 JDK 1.5 开始，提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行 CAS 操作.所以我们可以使用锁或者利用AtomicReference类把多个共享变量合并成一个共享变量来操作。")])]),a._v(" "),t("h2",{attrs:{id:"什么是aba问题-aba问题怎么解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是aba问题-aba问题怎么解决"}},[a._v("#")]),a._v(" 什么是ABA问题？ABA问题怎么解决")]),a._v(" "),t("p",[a._v("ABA问题是乐观锁常见的问题。\n如果一个变量 V 初次读取的时候是 A 值，并且在准备赋值的时候检查到它仍然是 A 值，那我们就能说明它的值没有被其他线程修改过了吗？很明显是不能的，因为在这段时间它的值可能被改为其他值，然后又改回 A，那 CAS 操作就会误认为它从来没有被修改过。这个问题被称为 CAS 操作的 "),t("strong",[a._v('"ABA"问题。')]),a._v("\nABA 问题的解决思路是在变量前面追加上"),t("strong",[a._v("版本号或者时间戳")])]),a._v(" "),t("h1",{attrs:{id:"jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[a._v("#")]),a._v(" JMM")]),a._v(" "),t("h2",{attrs:{id:"并发编程的三个重要特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发编程的三个重要特性"}},[a._v("#")]),a._v(" 并发编程的三个重要特性")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("原子性")]),a._v("： 一次操作或者多次操作，要么所有的操作全部都得到执行并且不会受到任何因素的干扰而中断，要么都不执行。  在 Java 中，可以借助"),t("code",[a._v("synchronized")]),a._v(" 、各种 "),t("code",[a._v("Lock")]),a._v(" 以及各种原子类实现原子性。"),t("code",[a._v("synchronized")]),a._v(" 和各种 Lock 可以保证任一时刻只有一个线程访问该代码块，因此可以保障原子性。各种原子类是利用 CAS (compare and swap) 操作（可能也会用到 "),t("code",[a._v("volatile")]),a._v("或者"),t("code",[a._v("final")]),a._v("关键字）来保证原子操作。")]),a._v(" "),t("li",[t("strong",[a._v("可见性")]),a._v("：当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。在 Java 中，可以借助synchronized 、volatile 以及各种 Lock 实现可见性。如果我们将变量声明为 volatile ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。")]),a._v(" "),t("li",[t("strong",[a._v("有序性")]),a._v("：由于指令重排序问题，代码的执行顺序未必就是编写代码时候的顺序。"),t("strong",[a._v("指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致")]),a._v(" ，所以在多线程下，指令重排序可能会导致一些问题。  在 Java 中，volatile 关键字可以禁止指令进行重排序优化。")])]),a._v(" "),t("h2",{attrs:{id:"什么是jmm-为什么需要jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是jmm-为什么需要jmm"}},[a._v("#")]),a._v(" 什么是JMM？为什么需要JMM")]),a._v(" "),t("p",[a._v("JMM 看作是 Java 定义的并发编程相关的一组规范，除了抽象了线程和主内存之间的关系之外，其还规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。\n"),t("strong",[a._v("为什么要遵守这些并发相关的原则和规范呢？")]),a._v(" 这是因为并发编程下，像 CPU 多级缓存和指令重排这类设计可能会导致程序运行出现一些问题。就比如说我们上面提到的指令重排序就可能会让多线程程序的执行出现问题，为此，JMM 抽象了 happens-before 原则来解决这个指令重排序问题。\nJMM 说白了就是定义了一些规范来解决这些问题，开发者可以利用这些规范更方便地开发多线程程序。对于 Java 开发者说，你不需要了解底层原理，直接使用并发相关的一些关键字和类（比如 volatile、synchronized、各种 Lock）即可开发出并发安全的程序。")]),a._v(" "),t("h2",{attrs:{id:"jmm是如何抽象线程和主内存之间的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm是如何抽象线程和主内存之间的关系"}},[a._v("#")]),a._v(" JMM是如何抽象线程和主内存之间的关系？")]),a._v(" "),t("p",[t("strong",[a._v("Java 内存模型（JMM）")]),a._v(" 抽象了线程和主内存之间的关系，就比如说线程之间的共享变量必须存储在主内存中， 为共享变量提供了可见性的保障 。")]),a._v(" "),t("h2",{attrs:{id:"java内存区域和jmm有何区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java内存区域和jmm有何区别"}},[a._v("#")]),a._v(" Java内存区域和JMM有何区别")]),a._v(" "),t("p",[t("strong",[a._v("Java 内存区域和内存模型是完全不一样的两个东西")]),a._v(" ：")]),a._v(" "),t("ul",[t("li",[a._v("JVM 内存结构和 Java 虚拟机的运行时区域相关，定义了 JVM 在运行时如何分区存储程序数据，就比如说堆主要用于存放对象实例。")]),a._v(" "),t("li",[a._v("Java 内存模型和 Java 的并发编程相关，抽象了线程和主内存之间的关系就比如说线程之间的共享变量必须存储在主内存中，规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性的。")])]),a._v(" "),t("h2",{attrs:{id:"happens-before原则是什么-为什么需要happens-before原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#happens-before原则是什么-为什么需要happens-before原则"}},[a._v("#")]),a._v(" happens-before原则是什么？为什么需要happens-before原则")]),a._v(" "),t("p",[t("strong",[a._v("逻辑时钟并不度量时间本身，仅区分事件发生的前后顺序，其本质就是定义了一种 happens-before 关系。")]),a._v("\nhappens-before 原则的诞生是为了程序员和编译器、处理器之间的平衡。程序员追求的是易于理解和编程的强内存模型，遵守既定规则编码即可。编译器和处理器追求的是较少约束的弱内存模型，让它们尽己所能地去优化性能，让性能最大化。")]),a._v(" "),t("h1",{attrs:{id:"synchronized-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-关键字"}},[a._v("#")]),a._v(" synchronized 关键字")]),a._v(" "),t("h2",{attrs:{id:"synchronized-关键字的作用-自己是怎么使用的。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-关键字的作用-自己是怎么使用的。"}},[a._v("#")]),a._v(" synchronized 关键字的作用，自己是怎么使用的。")]),a._v(" "),t("p",[t("code",[a._v("synchronized")]),a._v("是 Java 中的一个关键字，翻译成中文是同步的意思，主要解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。\n在 Java 早期版本中，"),t("code",[a._v("synchronized")]),a._v("属于 "),t("strong",[a._v("重量级锁")]),a._v("，效率低下。这是因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高。\n不过，在 Java 6 之后， "),t("code",[a._v("synchronized")]),a._v("引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 "),t("code",[a._v("synchronized")]),a._v(" 锁的效率提升了很多。因此， "),t("code",[a._v("synchronized")]),a._v(" 还是可以在实际项目中使用的，像 JDK 源码、很多开源框架都大量使用了 "),t("code",[a._v("synchronized")])]),a._v(" "),t("h2",{attrs:{id:"synchronized-关键字的底层原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-关键字的底层原理"}},[a._v("#")]),a._v(" synchronized 关键字的底层原理")]),a._v(" "),t("p",[a._v("synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。\nsynchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法。\n"),t("strong",[a._v("不过两者的本质都是对对象监视器 monitor 的获取。")])]),a._v(" "),t("h2",{attrs:{id:"jdk1-6-之后-synchronized-关键字底层做了哪些优化。synchronized-锁升级流程。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-6-之后-synchronized-关键字底层做了哪些优化。synchronized-锁升级流程。"}},[a._v("#")]),a._v(" JDK1.6 之后 synchronized 关键字底层做了哪些优化。synchronized 锁升级流程。")]),a._v(" "),t("p",[a._v("DK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。\n锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。")]),a._v(" "),t("blockquote",[t("p",[a._v("参考："),t("a",{attrs:{href:"https://www.cnblogs.com/wuqinglong/p/9945618.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.cnblogs.com/wuqinglong/p/9945618.html"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"synchronized-和-reentranlock-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-reentranlock-的区别"}},[a._v("#")]),a._v(" synchronized 和 ReentranLock 的区别")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("synchronized 依赖于 JVM 实现的")]),a._v("，在 JDK1.6 对 synchronized 关键字进行了很多优化，但是这些优化都是基于虚拟机层面实现的。")])]),a._v(" "),t("p",[t("strong",[a._v("ReentrantLock 是 JDK 实现的")]),a._v("，查看源码，可以看到底层是通过lock() 和 unlock() 方法配合 try/finally 语句块来完成")]),a._v(" "),t("ul",[t("li",[a._v("ReentrantLock 支持中断等待锁的机制，而 synchronized 不支持")]),a._v(" "),t("li",[a._v("ReentrantLock 支持公平锁和非公平锁，默认是非公平锁，synchronized 只能是非公平锁。")])]),a._v(" "),t("h2",{attrs:{id:"synchronized-和-volatile-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-和-volatile-的区别"}},[a._v("#")]),a._v(" synchronized 和 volatile 的区别")]),a._v(" "),t("p",[a._v("synchronized 关键字和 volatile 关键字是两个互补的存在，而不是对立的存在！")]),a._v(" "),t("ul",[t("li",[a._v("volatile 关键字是线程同步的轻量级实现，所以 volatile性能肯定比synchronized关键字要好 。但是 volatile 关键字只能用于变量而 synchronized 关键字可以修饰方法以及代码块 。")]),a._v(" "),t("li",[a._v("volatile 关键字能保证数据的可见性，但不能保证数据的原子性。synchronized 关键字两者都能保证。")]),a._v(" "),t("li",[a._v("volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized 关键字解决的是多个线程之间访问资源的同步性。")])]),a._v(" "),t("h1",{attrs:{id:"volatile关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volatile关键字"}},[a._v("#")]),a._v(" volatile关键字")]),a._v(" "),t("h2",{attrs:{id:"volatile-关键字如何保证变量的可见性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volatile-关键字如何保证变量的可见性"}},[a._v("#")]),a._v(" volatile 关键字如何保证变量的可见性")]),a._v(" "),t("p",[a._v("在 Java 中，volatile 关键字可以保证变量的可见性，如果我们将变量声明为 "),t("strong",[a._v("volatile")]),a._v(" ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。"),t("br"),a._v("\nvolatile 关键字能保证数据的可见性，但不能保证数据的原子性。synchronized 关键字两者都能保证。\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676872581269-a764b630-98d5-4204-b8b1-9cfe73672812.png#averageHue=%23dcbf77&clientId=u610db969-cba4-4&from=paste&height=567&id=uebed9c13&originHeight=850&originWidth=983&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=102522&status=done&style=none&taskId=u18f74dbd-5308-4b5d-b8fa-0f46396e38e&title=&width=655.3333333333334",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"volatile-如何禁止指令重排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volatile-如何禁止指令重排序"}},[a._v("#")]),a._v(" volatile 如何禁止指令重排序")]),a._v(" "),t("p",[t("strong",[a._v("在 Java 中，volatile 关键字除了可以保证变量的可见性，还有一个重要的作用就是防止 JVM 的指令重排序。")]),a._v(" 如果我们将变量声明为 "),t("strong",[a._v("volatile")]),a._v(" ，在对这个变量进行读写操作的时候，会通过插入特定的 "),t("strong",[a._v("内存屏障")]),a._v(" 的方式来禁止指令重排序。\n在 Java 中，Unsafe 类提供了三个开箱即用的内存屏障相关的方法，屏蔽了操作系统底层的差异：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("loadFence")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("storeFence")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("native")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("fullFence")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n")])])]),t("h2",{attrs:{id:"volatile-可以保证原子性么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volatile-可以保证原子性么"}},[a._v("#")]),a._v(" volatile 可以保证原子性么")]),a._v(" "),t("p",[t("strong",[a._v("volatile 关键字能保证变量的可见性，但不能保证对变量的操作是原子性的。")])]),a._v(" "),t("h1",{attrs:{id:"threadlocal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[a._v("#")]),a._v(" ThreadLocal")]),a._v(" "),t("h2",{attrs:{id:"threadlocal-有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-有什么用"}},[a._v("#")]),a._v(" ThreadLocal 有什么用")]),a._v(" "),t("p",[a._v("通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。"),t("strong",[a._v("如果想实现每一个线程都有自己的专属本地变量该如何解决呢？")]),a._v("\nJDK 中自带的ThreadLocal类正是为了解决这样的问题。 "),t("strong",[a._v("ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。")]),a._v("\n如果你创建了一个ThreadLocal变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是ThreadLocal变量名的由来。他们可以使用 get() 和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。\n再举个简单的例子：两个人去宝屋收集宝物，这两个共用一个袋子的话肯定会产生争执，但是给他们两个人每个人分配一个袋子的话就不会出现这样的问题。如果把这两个人比作线程的话，那么 ThreadLocal 就是用来避免这两个线程竞争的。")]),a._v(" "),t("h2",{attrs:{id:"如何使用-threadlocal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-threadlocal"}},[a._v("#")]),a._v(" 如何使用 ThreadLocal")]),a._v(" "),t("p",[a._v("下面简单演示一下如何在项目中实际使用 ThreadLocal 。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("text"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("util"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalExample")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n     "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("withInitial")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"yyyyMMdd HHmm"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throws")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalExample")]),a._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalExample")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('""')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Override")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Thread Name= "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" default Formatter = "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("formatter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toPattern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Random")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextInt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("catch")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InterruptedException")]),a._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("printStackTrace")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//formatter pattern is changed here by thread, but it won't reflect to other threads")]),a._v("\n        formatter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SimpleDateFormat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Thread Name= "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" formatter = "')]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("formatter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toPattern")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n\n")])])]),t("p",[a._v("输出结果：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Formatter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yyyyMMdd "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HHmm")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" formatter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" yy"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("M")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("d ah"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("mm\n\n")])])]),t("p",[a._v("从输出中可以看出，虽然 Thread-0 已经改变了 formatter 的值，但 Thread-1 默认格式化值与初始化值相同，其他线程也一样。")]),a._v(" "),t("h2",{attrs:{id:"threadlocal-原理了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-原理了解吗"}},[a._v("#")]),a._v(" ThreadLocal 原理了解吗")]),a._v(" "),t("p",[a._v("从 Thread类源代码入手。")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//......")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//与此线程有关的ThreadLocal值。由ThreadLocal类维护")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ThreadLocalMap")]),a._v(" threadLocals "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ThreadLocalMap")]),a._v(" inheritableThreadLocals "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//......")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("从上面Thread类 源代码可以看出Thread 类中有一个 threadLocals 和 一个 inheritableThreadLocals 变量，它们都是 ThreadLocalMap 类型的变量,我们可以把 ThreadLocalMap 理解为ThreadLocal 类实现的定制化的 HashMap。默认情况下这两个变量都是 null，只有当前线程调用 ThreadLocal 类的 set或get方法时才创建它们，实际上调用这两个方法的时候，我们调用的是ThreadLocalMap类对应的 get()、set()方法。\nThreadLocal类的set()方法")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//获取当前请求的线程")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("currentThread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//取出 Thread 类内部的 threadLocals 变量(哈希表结构)")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("map "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("!=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 将需要存储的值放入到这个哈希表中")]),a._v("\n        map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("createMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("threadLocals"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("通过上面这些内容，我们足以通过猜测得出结论：**最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。**ThrealLocal 类中可以通过Thread.currentThread()获取到当前线程对象后，直接通过getMap(Thread t)可以访问到该线程的ThreadLocalMap对象。\n"),t("strong",[a._v("每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为 key ，Object 对象为 value 的键值对。")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocalMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadLocal")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" firstKey"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" firstValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//......")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("比如我们在同一个线程中声明了两个 ThreadLocal 对象的话， Thread内部都是使用仅有的那个ThreadLocalMap 存放数据的，ThreadLocalMap的 key 就是 ThreadLocal对象，value 就是 ThreadLocal 对象调用set方法设置的值。\nThreadLocal 数据结构如下图所示：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676873578331-55fd505c-18b2-46e2-ba15-7abbd567dd45.png#averageHue=%23fae1c5&clientId=u610db969-cba4-4&from=paste&height=435&id=u64462da0&originHeight=653&originWidth=936&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=60123&status=done&style=none&taskId=u6d9bfe07-fe99-4aa0-8bcc-76729509e3a&title=&width=624",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"threadlocal-内存泄露问题是怎么导致的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal-内存泄露问题是怎么导致的"}},[a._v("#")]),a._v(" ThreadLocal 内存泄露问题是怎么导致的？")]),a._v(" "),t("p",[t("strong",[a._v("ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，而 value 是强引用。所以，如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉")]),a._v("。\n这样一来，ThreadLocalMap 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。ThreadLocalMap 实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。"),t("strong",[a._v("使用完 ThreadLocal方法后 最好手动调用remove()方法")])]),a._v(" "),t("h1",{attrs:{id:"线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[a._v("#")]),a._v(" 线程池")]),a._v(" "),t("h2",{attrs:{id:"什么是线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程池"}},[a._v("#")]),a._v(" 什么是线程池")]),a._v(" "),t("p",[a._v("顾名思义，线程池就是管理一系列线程的资源池。当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。")]),a._v(" "),t("h2",{attrs:{id:"为什么要用线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用线程池"}},[a._v("#")]),a._v(" 为什么要用线程池")]),a._v(" "),t("p",[a._v("池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。\n"),t("strong",[a._v("线程池")]),a._v("提供了一种限制和管理资源（包括执行一个任务）的方式。 每个"),t("strong",[a._v("线程池")]),a._v("还维护一些基本统计信息，例如已完成任务的数量。\n"),t("strong",[a._v("使用线程池的好处")]),a._v("：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("降低资源消耗")]),a._v("。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")]),a._v(" "),t("li",[t("strong",[a._v("提高响应速度")]),a._v("。当任务到达时，任务可以不需要等到线程创建就能立即执行。")]),a._v(" "),t("li",[t("strong",[a._v("提高线程的可管理性")]),a._v("。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),a._v(" "),t("h2",{attrs:{id:"如何创建线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何创建线程池"}},[a._v("#")]),a._v(" 如何创建线程池")]),a._v(" "),t("p",[t("strong",[a._v("方式一：通过")]),t("code",[a._v("**ThreadPoolExecutor**")]),t("strong",[a._v("构造函数来创建（推荐）。")]),a._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676874278279-81ffe8ab-0b83-43fe-9a60-9df2180f0c46.png#averageHue=%23eeedce&clientId=u610db969-cba4-4&from=paste&height=180&id=u7ce38790&originHeight=270&originWidth=1424&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=282687&status=done&style=none&taskId=ue26f2bbd-f368-488b-8bff-3d5489617f7&title=&width=949.3333333333334",alt:"image.png"}})]),a._v(" "),t("p",[t("strong",[a._v("方式二：通过 "),t("strong",[t("code",[a._v("**Executor**")])]),a._v(" 框架的工具类 "),t("strong",[t("code",[a._v("**Executors**")])]),a._v(" 来创建。")])]),a._v(" "),t("p",[a._v("我们可以创建多种类型的 ThreadPoolExecutor：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("FixedThreadPool")]),a._v(" ： 该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。")]),a._v(" "),t("li",[t("strong",[a._v("SingleThreadExecutor：")]),a._v(" 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。")]),a._v(" "),t("li",[t("strong",[a._v("CachedThreadPool：")]),a._v(" 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。")]),a._v(" "),t("li",[t("strong",[a._v("ScheduledThreadPool")]),a._v(" ：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。")])]),a._v(" "),t("p",[a._v("对应 Executors 工具类中的方法如图所示：\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676874364107-52f18721-835e-496c-9e08-b8ce5858c526.png#averageHue=%232f353c&clientId=u610db969-cba4-4&from=paste&height=438&id=u92822543&originHeight=657&originWidth=942&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=348982&status=done&style=none&taskId=ucd368b13-e203-4cf6-977b-e204aa6ff2f&title=&width=628",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"线程池常见参数有哪些-如何解释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池常见参数有哪些-如何解释"}},[a._v("#")]),a._v(" 线程池常见参数有哪些？如何解释？")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * 用给定的初始参数创建一个新的ThreadPoolExecutor。\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadPoolExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" corePoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//线程池的核心线程数量")]),a._v("\n                              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" maximumPoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//线程池的最大线程数")]),a._v("\n                              "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("long")]),a._v(" keepAliveTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//当线程数大于核心线程数时，多余的空闲线程存活的最长时间")]),a._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TimeUnit")]),a._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//时间单位")]),a._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BlockingQueue")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" workQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//任务队列，用来储存等待执行任务的队列")]),a._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadFactory")]),a._v(" threadFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//线程工厂，用来创建线程，一般默认即可")]),a._v("\n                              "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RejectedExecutionHandler")]),a._v(" handler"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务")]),a._v("\n                               "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("corePoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v("\n            maximumPoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v("\n            maximumPoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" corePoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v("\n            keepAliveTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("workQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" threadFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" handler "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("NullPointerException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("corePoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" corePoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("maximumPoolSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" maximumPoolSize"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("workQueue "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" workQueue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("keepAliveTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" unit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toNanos")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("keepAliveTime"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("threadFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" threadFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("handler "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" handler"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[t("strong",[a._v("ThreadPoolExecutor 3 个最重要的参数：")])]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("corePoolSize :")]),a._v(" 任务队列未达到队列容量时，最大可以同时运行的线程数量。")]),a._v(" "),t("li",[t("strong",[a._v("maximumPoolSize :")]),a._v(" 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。")]),a._v(" "),t("li",[t("strong",[a._v("workQueue:")]),a._v(" 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。")])]),a._v(" "),t("p",[a._v("ThreadPoolExecutor其他常见参数 :")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("keepAliveTime")]),a._v(":线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime才会被回收销毁；")]),a._v(" "),t("li",[t("strong",[a._v("unit")]),a._v(" : keepAliveTime 参数的时间单位。")]),a._v(" "),t("li",[t("strong",[a._v("threadFactory")]),a._v(" :executor 创建新线程的时候会用到。")]),a._v(" "),t("li",[t("strong",[a._v("handler")]),a._v(" :饱和策略。关于饱和策略下面单独介绍一下。")])]),a._v(" "),t("h2",{attrs:{id:"线程池的饱和策略有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池的饱和策略有哪些"}},[a._v("#")]),a._v(" 线程池的饱和策略有哪些")]),a._v(" "),t("p",[a._v("如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，ThreadPoolTaskExecutor 定义一些策略:")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("ThreadPoolExecutor.AbortPolicy：")]),a._v(" 抛出 RejectedExecutionException来拒绝新任务的处理。")]),a._v(" "),t("li",[t("strong",[a._v("ThreadPoolExecutor.CallerRunsPolicy：")]),a._v(" 调用执行自己的线程运行任务，也就是直接在调用execute方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。")]),a._v(" "),t("li",[t("strong",[a._v("ThreadPoolExecutor.DiscardPolicy：")]),a._v(" 不处理新任务，直接丢弃掉。")]),a._v(" "),t("li",[t("strong",[a._v("ThreadPoolExecutor.DiscardOldestPolicy：")]),a._v(" 此策略将丢弃最早的未处理的任务请求。")])]),a._v(" "),t("p",[a._v("举个例子： Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略的话来配置线程池的时候默认使用的是 ThreadPoolExecutor.AbortPolicy。在默认情况下，ThreadPoolExecutor 将抛出 RejectedExecutionException 来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。 对于可伸缩的应用程序，建议使用 ThreadPoolExecutor.CallerRunsPolicy。当最大池被填满时，此策略为我们提供可伸缩队列。（这个直接查看 ThreadPoolExecutor 的构造函数源码就可以看出，比较简单的原因，这里就不贴代码了）")]),a._v(" "),t("h2",{attrs:{id:"线程池的执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池的执行流程"}},[a._v("#")]),a._v(" 线程池的执行流程")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676874843825-a0980bca-d45d-4756-a1e0-067e3592de7e.png#averageHue=%23fefefe&clientId=u610db969-cba4-4&from=paste&height=270&id=u25d20957&originHeight=405&originWidth=972&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=49122&status=done&style=none&taskId=u334d202c-4afb-4d91-b6a6-13c0c189c27&title=&width=648",alt:"image.png"}})]),a._v(" "),t("ol",[t("li",[a._v("如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。")]),a._v(" "),t("li",[a._v("如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。")]),a._v(" "),t("li",[a._v("如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。")]),a._v(" "),t("li",[a._v("如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用"),t("code",[a._v("RejectedExecutionHandler.rejectedExecution()")]),a._v("方法。")])]),a._v(" "),t("h2",{attrs:{id:"如何设定线程池的大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何设定线程池的大小"}},[a._v("#")]),a._v(" 如何设定线程池的大小")]),a._v(" "),t("p",[a._v("线程池大小设置过大或者过小都会有问题，合适的才是最好。")]),a._v(" "),t("ul",[t("li",[a._v("如果我们设置的线程池数量太小的话，如果同一时间有大量任务/请求需要处理，可能会导致大量的请求/任务在任务队列中排队等待执行，甚至会出现任务队列满了之后任务/请求无法处理的情况，或者大量任务堆积在任务队列导致 OOM。这样很明显是有问题的，CPU 根本没有得到充分利用。")]),a._v(" "),t("li",[a._v("如果我们设置线程数量太大，大量线程可能会同时在争取 CPU 资源，这样会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。")])]),a._v(" "),t("p",[a._v("有一个简单并且适用面比较广的公式：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("CPU 密集型任务(N+1)：")]),a._v(" 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。")]),a._v(" "),t("li",[t("strong",[a._v("I/O 密集型任务(2N)：")]),a._v(" 这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。")])]),a._v(" "),t("h1",{attrs:{id:"aqs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[a._v("#")]),a._v(" AQS")]),a._v(" "),t("h2",{attrs:{id:"aqs-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aqs-是什么"}},[a._v("#")]),a._v(" AQS 是什么？")]),a._v(" "),t("p",[a._v("AQS 的全称为 AbstractQueuedSynchronizer ，翻译过来的意思就是抽象队列同步器。这个类在 java.util.concurrent.locks 包下面。"),t("br"),a._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676877363270-595a5429-4127-4933-97b5-0009088be828.png#averageHue=%23fbf6f4&clientId=u610db969-cba4-4&from=paste&height=356&id=ud31264f8&originHeight=534&originWidth=519&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=100495&status=done&style=none&taskId=ue57e7c8c-667e-416f-9d21-bc287afe97a&title=&width=346",alt:"image.png"}}),a._v("\nAQS 就是一个抽象类，主要用来构建锁和同步器")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AbstractQueuedSynchronizer")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AbstractOwnableSynchronizer")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("io"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")])]),a._v("Serializable")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])])]),t("p",[a._v("AQS 为构建锁和同步器提供了一些通用功能的是实现，因此，使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如我们提到的 ReentrantLock，Semaphore，其他的诸如 ReentrantReadWriteLock，SynchronousQueue等等皆是基于 AQS 的。")]),a._v(" "),t("h2",{attrs:{id:"aqs的原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aqs的原理是什么"}},[a._v("#")]),a._v(" AQS的原理是什么")]),a._v(" "),t("p",[a._v("AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 "),t("strong",[a._v("CLH 队列锁")]),a._v(" 实现的，即将暂时获取不到锁的线程加入到队列中。")])])}),[],!1,null,null,null);t.default=n.exports}}]);