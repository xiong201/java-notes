(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{361:function(t,v,_){"use strict";_.r(v);var s=_(7),r=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"内存溢出排查"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出排查"}},[t._v("#")]),t._v(" 内存溢出排查")]),t._v(" "),v("ol",[v("li",[t._v("dump 出内存文件")]),t._v(" "),v("li",[t._v("Memory Analysis进行分析，定位到造成内存溢出的代码，进行相应的处理。")])]),t._v(" "),v("h1",{attrs:{id:"内存泄漏"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[t._v("#")]),t._v(" 内存泄漏")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("使用")]),t._v(" "),v("code",[t._v("**jps**")]),t._v(" "),v("strong",[t._v("命令获取到当前JVM进程的pid")])]),t._v(" "),v("li",[v("strong",[t._v("使用")]),t._v(" "),v("code",[t._v("**jstat -gc**")]),t._v(" "),v("strong",[t._v("命令观察GC")]),t._v("： 如果YGC每次GC掉的内存并不多，每次YGC后都有一部分内存未回收，导致在多次YGC后回收不掉的内存被挪到堆的old区，old满了之后FGC发现也是回收不掉。就基本可以确定是内存泄漏问题")]),t._v(" "),v("li",[v("strong",[t._v("使用")]),v("code",[t._v("**jmap -dump**")]),v("strong",[t._v("命令生成堆转存快照。")])]),t._v(" "),v("li",[v("strong",[t._v("使用MAT（")]),t._v(" MemoryAnalyzer "),v("strong",[t._v("）分析dump文件，找到具体内存泄漏的代码。")]),t._v("（MAT的 Leak Suspects报表帮助我们定位到内存泄漏的代码  ）")])]),t._v(" "),v("h1",{attrs:{id:"jvm-调优"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm-调优"}},[t._v("#")]),t._v(" JVM 调优")]),t._v(" "),v("p",[t._v("JVM 调优的主要步骤：")]),t._v(" "),v("ol",[v("li",[t._v("监控分析GC日志")]),t._v(" "),v("li",[t._v("出现GC时间长或者GC频率高就得考虑进行JVM调优")]),t._v(" "),v("li",[t._v("分析出现问题的原因，确定调优目标")]),t._v(" "),v("li",[t._v("调整参数或者优化代码实现调优")])]),t._v(" "),v("h1",{attrs:{id:"reference"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),v("ul",[v("li",[t._v("https://juejin.cn/post/7128377003224334373#heading-0")])])])}),[],!1,null,null,null);v.default=r.exports}}]);