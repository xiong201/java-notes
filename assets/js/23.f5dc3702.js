(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{353:function(v,_,t){"use strict";t.r(_);var s=t(7),r=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"并发编程三个特性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发编程三个特性"}},[v._v("#")]),v._v(" 并发编程三个特性")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("原子性")]),v._v("：一个的操作或者多次操作，要么所有的操作全部都得到执行并且不会收到任何因素的干扰而中断，要么所有的操作都执行，要么都不执行。")]),v._v(" "),_("li",[_("strong",[v._v("可见性")]),v._v("：当一个线程对共享变量进行修改，其他线程可以立即看到修改后的值。")]),v._v(" "),_("li",[_("strong",[v._v("有序性")]),v._v("：代码在执行的过程中的先后顺序，Java 在编译器以及运行期间的优化，代码的执行顺序未必就是编写代码时候的顺序。")])]),v._v(" "),_("h1",{attrs:{id:"进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[v._v("#")]),v._v(" 进程和线程")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("进程")]),v._v("：操作系统在运行一个程序时，就会为其创建一个进程。比如，启动一个 Java 程序，操作系统就会创建一个Java进程。")]),v._v(" "),_("li",[_("strong",[v._v("线程")]),v._v("：操作系统调度的最小单元是线程，也叫轻量级进程，在一个进程里可以创建多个线程。这些线程都有自己的程序计数器、Java虚拟机栈、本地方法栈等，并且能够访问共享的内存变量。")])]),v._v(" "),_("h1",{attrs:{id:"并发与并行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行"}},[v._v("#")]),v._v(" 并发与并行")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("并发")]),v._v("：两个及两个以上的作业在"),_("strong",[v._v("同一时间段内")]),v._v("执行。")]),v._v(" "),_("li",[_("strong",[v._v("并行")]),v._v("：两个及两个以上的作业在"),_("strong",[v._v("同一时刻")]),v._v("执行。")])]),v._v(" "),_("p",[v._v("两者区分的关键点是：是否是"),_("strong",[v._v("同时执行")]),v._v("，同时执行是并行。")]),v._v(" "),_("h1",{attrs:{id:"同步和异步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[v._v("#")]),v._v(" 同步和异步")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("同步")]),v._v("：发出一个调用之后，在没有得到结果之前，该调用就不可以返回，一直等待。")]),v._v(" "),_("li",[_("strong",[v._v("异步")]),v._v("：发出一个调用后，不用等待结果返回，该调用直接返回。")])]),v._v(" "),_("h1",{attrs:{id:"用户线程和守护线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用户线程和守护线程"}},[v._v("#")]),v._v(" 用户线程和守护线程")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("用户线程")]),v._v("：平时用到的普通线程。")]),v._v(" "),_("li",[_("strong",[v._v("守护线程")]),v._v("（Daemon 线程）：运行在后台，是一种特殊的线程，比如垃圾回收")])]),v._v(" "),_("p",[_("strong",[v._v("当主线程结束后，用户线程还在运行，JVM 存活。如果没有用户线程，都是守护线程，JVM 结束")]),v._v(" 。")]),v._v(" "),_("h1",{attrs:{id:"线程的状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程的状态"}},[v._v("#")]),v._v(" 线程的状态")]),v._v(" "),_("p",[_("code",[v._v("Thread.State")]),v._v("保存了所有线程状态。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("NEW")]),v._v("：初始状态，线程被创建出来但没有被调用"),_("code",[v._v("start()")]),v._v("。")]),v._v(" "),_("li",[_("strong",[v._v("RUNNABLE")]),v._v("：运行状态，线程被调用了"),_("code",[v._v("start()")]),v._v("等待运行的状态。")]),v._v(" "),_("li",[_("strong",[v._v("BLOCKED")]),v._v("：阻塞状态，需要等待锁释放。")]),v._v(" "),_("li",[_("strong",[v._v("WAITING")]),v._v(" ：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）")]),v._v(" "),_("li",[_("strong",[v._v("TIMED_WAITING")]),v._v("：超时等待状态，可以在指定的时间内自行返回而不是像WAITING那样一直等待。")]),v._v(" "),_("li",[_("strong",[v._v("TERMINATED")]),v._v("：终止状态，表示该线程已经运行完毕。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);