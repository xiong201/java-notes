(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{359:function(t,a,s){"use strict";s.r(a);var v=s(7),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[t._v("#")]),t._v(" 相关概念")]),t._v(" "),a("h2",{attrs:{id:"stw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stw"}},[t._v("#")]),t._v(" STW")]),t._v(" "),a("p",[t._v("GC如何需要停止所有应用程序的进程称为STW（"),a("strong",[t._v("Stop-the-world")]),t._v(" ）。")]),t._v(" "),a("h2",{attrs:{id:"saft-point-安全点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#saft-point-安全点"}},[t._v("#")]),t._v(" saft point（安全点）")]),t._v(" "),a("p",[t._v("挂起线程的点")]),t._v(" "),a("ul",[a("li",[t._v("从全局观点来看，所有线程必须在GC 运行前，在一个safepoint处阻塞（block）。")]),t._v(" "),a("li",[t._v("从局部观点来看，safepoint是一个代码块中特殊的一点，该处正在执行的线程可以因GC而阻塞。")]),t._v(" "),a("li",[t._v("GC的标记阶段需要stop the world，让所有Java线程挂起，这样JVM才可以安全地来标记对象。")])]),t._v(" "),a("p",[a("strong",[t._v("safepoint")]),t._v("可以用来实现让所有Java线程挂起的需求。这是一种 "),a("strong",[t._v('"主动式"')]),t._v("(Voluntary Suspension)的实现")]),t._v(" "),a("p",[t._v("safe point指的特定位置主要有:")]),t._v(" "),a("ol",[a("li",[t._v("循环的末尾 (防止大循环的时候一直不进入safepoint，而其他线程在等待它进入safepoint)")]),t._v(" "),a("li",[t._v("方法返回前")]),t._v(" "),a("li",[t._v("调用方法的call之后")]),t._v(" "),a("li",[t._v("抛出异常的位置")])]),t._v(" "),a("h2",{attrs:{id:"垃圾回收类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收类型"}},[t._v("#")]),t._v(" 垃圾回收类型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。Minor GC 非常频繁，回收速度比较快。")])]),t._v(" "),a("li",[a("p",[t._v("老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集， Major GC 一般比 Minor GC慢 10 倍以上。目前只有CMS收集器会有单独收集老年代的行为。")])]),t._v(" "),a("li",[a("p",[t._v("整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。")])]),t._v(" "),a("li",[a("p",[t._v("混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。")])])]),t._v(" "),a("h1",{attrs:{id:"对象已经死亡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象已经死亡"}},[t._v("#")]),t._v(" 对象已经死亡？")]),t._v(" "),a("h2",{attrs:{id:"引用计数算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法"}},[t._v("#")]),t._v(" 引用计数算法")]),t._v(" "),a("p",[t._v("给对象中添加一个引用计数器，每当有一个地方引用它，计数器就加 1；当引用失效，计数器就减 1；任何时候计数器为 0 的对象就是不可能再被使用的。")]),t._v(" "),a("p",[a("strong",[t._v("这个方法实现简单，效率高，但是目前主流的虚拟机中并没有选择这个算法来管理内存，其最主要的原因是它很难解决对象之间相互循环引用的问题。")]),t._v(" 所谓对象之间的相互引用问题，如下面代码所示：除了对象 objA 和 objB 相互引用着对方之外，这两个对象之间再无任何引用。但是他们因为互相引用对方，导致它们的引用计数器都不为 0，于是引用计数算法无法通知 GC 回收器回收他们。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGc")]),t._v(" objA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGc")]),t._v(" objB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReferenceCountingGc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tobjA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tobjB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" objA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tobjA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tobjB "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"可达性分析算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析算法"}},[t._v("#")]),t._v(" 可达性分析算法")]),t._v(" "),a("p",[t._v("这个算法的基本思想就是通过一系列的称为 "),a("strong",[t._v("“GC Roots”")]),t._v(" 的对象作为起点，从这些节点开始向下搜索，节点所走过的路径称为引用链，当一个对象到 GC Roots 没有任何引用链相连的话，则证明此对象是不可用的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230408111009982.png",alt:"image-20230408111009982"}})]),t._v(" "),a("p",[t._v("可作为 GC Roots 的对象包括下面几种:")]),t._v(" "),a("ul",[a("li",[t._v("虚拟机栈(栈帧中的本地变量表)中引用的对象")]),t._v(" "),a("li",[t._v("本地方法栈(Native 方法)中引用的对象")]),t._v(" "),a("li",[t._v("方法区中类静态属性引用的对象")]),t._v(" "),a("li",[t._v("方法区中常量引用的对象")]),t._v(" "),a("li",[t._v("所有被同步锁持有的对象")])]),t._v(" "),a("h2",{attrs:{id:"不可达的对象并非-非死不可"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不可达的对象并非-非死不可"}},[t._v("#")]),t._v(" 不可达的对象并非“非死不可”")]),t._v(" "),a("p",[t._v("即使在可达性分析法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑阶段”，要真正宣告一个对象死亡，至少要经历两次标记过程；可达性分析法中不可达的对象被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize 方法。当对象没有覆盖 finalize 方法，或 finalize 方法已经被虚拟机调用过时，虚拟机将这两种情况视为没有必要执行。")]),t._v(" "),a("p",[t._v("被判定为需要执行的对象将会被放在一个队列中进行第二次标记，除非这个对象与引用链上的任何一个对象建立关联，否则就会被真的回收。")]),t._v(" "),a("h1",{attrs:{id:"垃圾收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集算法"}},[t._v("#")]),t._v(" 垃圾收集算法")]),t._v(" "),a("h2",{attrs:{id:"标记-清除算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法"}},[t._v("#")]),t._v(" 标记-清除算法")]),t._v(" "),a("p",[t._v("该算法分为“标记”和“清除”阶段：首先标记出所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。它是最基础的收集算法，后续的算法都是对其不足进行改进得到。这种垃圾收集算法会带来两个明显的问题：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("效率问题")])]),t._v(" "),a("li",[a("strong",[t._v("空间问题（标记清除后会产生大量不连续的碎片）")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230408111309453.png",alt:"image-20230408111309453"}})]),t._v(" "),a("h2",{attrs:{id:"标记-复制算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-复制算法"}},[t._v("#")]),t._v(" 标记-复制算法")]),t._v(" "),a("p",[t._v("为了解决效率问题，“标记-复制”收集算法出现了。它可以将内存分为大小相同的两块，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。"),a("strong",[t._v("标记-复制算法虽然解决了碎片化问题，但是存在空间浪费。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230408111351728.png",alt:"image-20230408111351728"}})]),t._v(" "),a("h2",{attrs:{id:"标记-整理算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理算法"}},[t._v("#")]),t._v(" 标记-整理算法")]),t._v(" "),a("p",[t._v("根据老年代的特点提出的一种标记算法，标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象回收，而是让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230408111541970.png",alt:"image-20230408111541970"}})]),t._v(" "),a("h2",{attrs:{id:"分代收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[t._v("#")]),t._v(" 分代收集算法")]),t._v(" "),a("p",[t._v("当前虚拟机的垃圾收集都采用分代收集算法，这种算法没有什么新的思想，只是根据对象存活周期的不同将内存分为几块。一般将 java 堆分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。")]),t._v(" "),a("p",[a("strong",[t._v("比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。")])]),t._v(" "),a("h1",{attrs:{id:"垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[t._v("#")]),t._v(" 垃圾收集器")]),t._v(" "),a("p",[t._v("串行收集器：使用"),a("strong",[t._v("单线程")]),t._v("进行垃圾回收的收集器，每次回收时，串行收集器只有一个工作线程，对于"),a("strong",[t._v("并行能力较弱")]),t._v("的计算机来说，串行收集器的专注性和独占性往往有更好的性能表现。")]),t._v(" "),a("p",[t._v("串行收集器：")]),t._v(" "),a("ul",[a("li",[t._v("Serial 收集器")]),t._v(" "),a("li",[t._v("Serial Old 收集器")])]),t._v(" "),a("p",[t._v("并行收集器：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Parallel Scavenge 收集器")])]),t._v(" "),a("li",[a("p",[t._v("Parallel Old 收集器")])]),t._v(" "),a("li",[a("p",[t._v("ParNew 收集器")])]),t._v(" "),a("li",[a("p",[t._v("CMS 收集器")])]),t._v(" "),a("li",[a("p",[t._v("G1 收集器")])])]),t._v(" "),a("p",[t._v("有 7 种不同的垃圾回收器，它们分别用于不同分代的垃圾回收。")]),t._v(" "),a("ul",[a("li",[t._v("新生代回收器：Serial、ParNew、Parallel Scavenge")]),t._v(" "),a("li",[t._v("老年代回收器：Serial Old、Parallel Old、CMS")]),t._v(" "),a("li",[t._v("整堆回收器：G1")])]),t._v(" "),a("p",[t._v("可选的搭配方案：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("新生代")]),t._v(" "),a("th",[t._v("老年代")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Serial")]),t._v(" "),a("td",[t._v("Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("Serial")]),t._v(" "),a("td",[t._v("CMS")])]),t._v(" "),a("tr",[a("td",[t._v("ParNew")]),t._v(" "),a("td",[t._v("Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("ParNew")]),t._v(" "),a("td",[t._v("CMS")])]),t._v(" "),a("tr",[a("td",[t._v("Parallel Scavenge")]),t._v(" "),a("td",[t._v("Serial Old")])]),t._v(" "),a("tr",[a("td",[t._v("Parallel Scavenge")]),t._v(" "),a("td",[t._v("Parallel Old")])]),t._v(" "),a("tr",[a("td",[t._v("G1")]),t._v(" "),a("td",[t._v("G1")])])])]),t._v(" "),a("h2",{attrs:{id:"serial-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[t._v("#")]),t._v(" Serial 收集器")]),t._v(" "),a("p",[t._v("Serial收集器是一个新生代收集器，单线程执行，使用"),a("strong",[t._v("标记-复制算法")]),t._v("。它在进行垃圾收集时，必须暂停其他所有的工作线程(用户线程)。是JVM Client模式下默认的新生代收集器。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的"),a("strong",[t._v("单线程收集效率")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230405162406014.png",alt:"image-20230405162406014"}})]),t._v(" "),a("h2",{attrs:{id:"serial-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[t._v("#")]),t._v(" Serial Old 收集器")]),t._v(" "),a("p",[t._v("Serial收集器的老年代版本，它同样是一个单线程收集器，使用 "),a("strong",[t._v("“标记-整理”算法")]),t._v("。也会暂定所有用户线程。")]),t._v(" "),a("h2",{attrs:{id:"parallel-scavenge-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器"}},[t._v("#")]),t._v(" Parallel Scavenge 收集器")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:+UseParallelGC")])]),t._v(" "),a("p",[t._v("目标是达到一个可控制的吞吐量（Throughput）。")]),t._v(" "),a("p",[t._v("吞吐量 = 运行用户代码时间 /（运行用户代码时间+垃圾收集时间）。")]),t._v(" "),a("p",[t._v("虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是99%。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406075328810.png",alt:"image-20230406075328810"}})]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("新生代使用"),a("strong",[t._v("并行回收收集器")]),t._v("，老年代使用"),a("strong",[t._v("串行收集器")])]),t._v(" "),a("li",[t._v("吞吐量优先收集器")]),t._v(" "),a("li",[t._v("新生代收集器"),a("strong",[t._v("复制算法")]),t._v("，是并行的多线程收集器。")])]),t._v(" "),a("h2",{attrs:{id:"parallel-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[t._v("#")]),t._v(" Parallel Old 收集器")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:+UseParallelOldGC")])]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("Parallel Scavenge收集器的老年代版本，使用多线程和 "),a("strong",[t._v("“标记-整理”算法")]),t._v("。")]),t._v(" "),a("li",[t._v("在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑"),a("strong",[t._v("Parallel Scavenge")]),t._v("加"),a("strong",[t._v("Parallel Old")]),t._v("收集器。")])]),t._v(" "),a("h2",{attrs:{id:"parnew-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[t._v("#")]),t._v(" ParNew 收集器")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:+UseParNewGC")])]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:ParallelGCThreads=n")]),t._v(" 设置并行收集器收集时使用的并行收集线程数。一般最好和计算机的CPU相当")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("新生代并行（ParNew），老年代串行（Serial Old）")]),t._v(" "),a("li",[t._v("Serial收集器的多线程版本")]),t._v(" "),a("li",[t._v("单CPU性能并不如Serial，因为存在线程交互的开销")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406075821025.png",alt:"image-20230406075821025"}})]),t._v(" "),a("h2",{attrs:{id:"cms-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[t._v("#")]),t._v(" CMS 收集器")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:+UseConcMarkSweepGC")]),t._v(" 应用CMS收集器。")]),t._v(" "),a("p",[t._v("尽管CMS收集器采用的是 "),a("strong",[t._v("并发回收（非独占式）")]),t._v(" ，但是在其"),a("strong",[t._v("初始标记")]),t._v("和"),a("strong",[t._v("重新标记")]),t._v("这两个阶段中仍然需要执行“Stop-the-World”机制暂停程序中的工作线程，不过暂停时间并不会太长。")]),t._v(" "),a("p",[t._v("因此可以说明 "),a("strong",[t._v("目前所有的垃圾收集器都做不到完全不需要“stop-the-World")]),t._v(" ， "),a("strong",[t._v("只是尽可能地缩短暂停时间")]),t._v(" 。")]),t._v(" "),a("p",[t._v("由于最耗费时间的"),a("strong",[t._v("并发标记")]),t._v("与"),a("strong",[t._v("并发清除")]),t._v("阶段都不需要暂停工作，所以整体的回收是低停顿的。")]),t._v(" "),a("p",[t._v("另外，由于在垃圾收集阶段"),a("strong",[t._v("用户线程没有中断")]),t._v(" ，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。")]),t._v(" "),a("p",[a("strong",[t._v("特点:")])]),t._v(" "),a("ul",[a("li",[t._v("低延迟： 减少STW对用户体验的影响【响应时间和延迟要求高】")]),t._v(" "),a("li",[t._v("并发收集：可以同时执行用户线程")]),t._v(" "),a("li",[t._v("CMS收集器 不能像其他收集器那样等到老年代几乎完全被填满了再进行收集 ，而是当堆内存使用率达到某一阈值时，便开始进行回收。")]),t._v(" "),a("li",[t._v("CMS收集器的垃圾收集算法采用的是标记清除算法。")]),t._v(" "),a("li",[t._v("会产生内存碎片，导致并发清除后，用户线程可用的空间不足。")]),t._v(" "),a("li",[t._v("CMS收集器对CPU资源非常敏感。")])]),t._v(" "),a("p",[t._v("CMS垃圾回收器：")]),t._v(" "),a("p",[t._v("CMS整个过程比之前的收集器要复杂，整个过程分为 4 个主要阶段，即"),a("strong",[t._v("初始标记阶段")]),t._v("、"),a("strong",[t._v("并发标记阶段")]),t._v("、"),a("strong",[t._v("重新标记阶段")]),t._v("和"),a("strong",[t._v("并发清除阶段")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("( 涉及STW的阶段主要是："),a("strong",[t._v("初始标记")]),t._v(" 和 "),a("strong",[t._v("重新标记")]),t._v(" )")])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("初始标记")]),t._v("（Initial-Mark）阶段 ：在这个阶段中，程序中所有的工作线程都将会因为“stop-the-world”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出GCRoots能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。【STW】")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("并发标记")]),t._v("（Concurrent-Mark）阶段 ：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("重新标记")]),t._v("（Remark）阶段 ：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了 修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录 ，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。【STW】")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("并发清除")]),t._v("（Concurrent-Sweep）阶段 ：此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。")])])]),t._v(" "),a("h2",{attrs:{id:"g1-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器"}},[t._v("#")]),t._v(" G1 收集器")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:+UseG1Gc")]),t._v(" 应用G1收集器")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:MaxGCPauseMillis")]),t._v(" 指定最大停顿时间")]),t._v(" "),a("p",[t._v("配置参数："),a("strong",[t._v("-XX:ParallelGCThreads")]),t._v(" 设置并行回收的线程数量")]),t._v(" "),a("p",[t._v("Garbage-First当今收集器技术发展的最前沿成果之一，G1是一款面向服务端应用的垃圾收集器。大内存，企业配置的垃圾收集器大多都是G1。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ol",[a("li",[t._v("并行与并发：充分利用多CPU、多核环境下的硬件优势")]),t._v(" "),a("li",[t._v("分代收集：不需要其他收集器配合就能独立管理整个GC堆")]),t._v(" "),a("li",[t._v("空间整合：“标记—整理”算法实现的收集器，局部上基于“复制”算法不会产生内存空间碎片")]),t._v(" "),a("li",[t._v("可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406080304552.png",alt:"image-20230406080304552"}})]),t._v(" "),a("p",[t._v("G1收集器的运作大致可划分为以下几个步骤：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("初始标记")]),t._v("：标记一下GC Roots能直接关联到的对象，需要停顿线程，但耗时很短")]),t._v(" "),a("li",[a("strong",[t._v("并发标记")]),t._v("：是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行")]),t._v(" "),a("li",[a("strong",[t._v("最终标记")]),t._v("：修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录")]),t._v(" "),a("li",[a("strong",[t._v("筛选回收")]),t._v("：对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划")])])])}),[],!1,null,null,null);a.default=_.exports}}]);