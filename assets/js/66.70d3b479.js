(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{396:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"springcloud-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-基础"}},[t._v("#")]),t._v(" SpringCloud 基础")]),t._v(" "),a("h2",{attrs:{id:"什么是-springcloud"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-springcloud"}},[t._v("#")]),t._v(" 什么是 SpringCloud？")]),t._v(" "),a("p",[t._v("Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、智能路由、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。\nSpring Cloud并没有重复制造轮子，它只是将各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。")]),t._v(" "),a("h2",{attrs:{id:"springcloud-的核心组件有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-的核心组件有哪些"}},[t._v("#")]),t._v(" SpringCloud 的核心组件有哪些？")]),t._v(" "),a("ul",[a("li",[t._v("Spring Cloud Eureka（服务注册中心）：特性有失效剔除、服务保护")]),t._v(" "),a("li",[t._v("Spring Cloud Zuul（API服务网关）：功能有路由分发和过滤")]),t._v(" "),a("li",[t._v("Spring Cloud Config（分布式配置中心）：支持本地仓库、SVN、Git、Jar包内配置等模式")]),t._v(" "),a("li",[t._v("Spring Cloud Ribbon（客户端负载均衡）：特性有区域亲和,重试机制")]),t._v(" "),a("li",[t._v("Spring Cloud Hystrix（服务断路器）：客户端容错保护,特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离")]),t._v(" "),a("li",[t._v("Spring Cloud Feign（服务接口调用）：声明式服务调用本质上就是Ribbon+Hystrix")]),t._v(" "),a("li",[t._v("Spring Cloud Stream（消息驱动）：有Sink、Source、Processor三种通道,特性有订阅发布、消费组、消息分区")]),t._v(" "),a("li",[t._v("Spring Cloud Bus（消息总线）：配合Config仓库修改的一种Stream实现，")]),t._v(" "),a("li",[t._v("Spring Cloud Sleuth（分布式服务追踪）：需要搞清楚TraceID和SpanID以及抽样,如何与ELK整合")])]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-eureka"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-eureka"}},[t._v("#")]),t._v(" Spring Cloud Eureka")]),t._v(" "),a("h2",{attrs:{id:"什么是eureka"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是eureka"}},[t._v("#")]),t._v(" 什么是Eureka")]),t._v(" "),a("p",[t._v("Eureka作为SpringCloud的服务注册功能服务器，他是服务注册中心，系统中的其他服务使用Eureka的客户端将其连接到Eureka Service中，并且保持心跳，这样工作人员可以通过Eureka Service来监控各个微服务是否运行正常。")]),t._v(" "),a("h2",{attrs:{id:"springcloud-如何实现服务的注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-如何实现服务的注册"}},[t._v("#")]),t._v(" SpringCloud 如何实现服务的注册")]),t._v(" "),a("ol",[a("li",[t._v("服务发布时，指定对应的服务名,将服务注册到 注册中心 eureka")]),t._v(" "),a("li",[t._v("注册中心加@EnableEurekaServer,服务用@EnableDiscoveryClient，然后用ribbon或feign进行服务直接的调用发现。")])]),t._v(" "),a("h2",{attrs:{id:"eureka自我保护机制是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka自我保护机制是什么"}},[t._v("#")]),t._v(" eureka自我保护机制是什么?")]),t._v(" "),a("p",[t._v("默认情况下，如果Eureka Service在一定时间内没有接收到某个微服务的心跳，Eureka Service会进入自我保护模式，在该模式下Eureka Service会保护服务注册表中的信息，不再删除注册表中的数据，当网络故障恢复后，Eureka Servic 节点会自动退出自我保护模式")]),t._v(" "),a("h2",{attrs:{id:"eureka和zookeeper都可以提供服务注册与发现的功能-请说说两个的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka和zookeeper都可以提供服务注册与发现的功能-请说说两个的区别"}},[t._v("#")]),t._v(" Eureka和ZooKeeper都可以提供服务注册与发现的功能,请说说两个的区别")]),t._v(" "),a("ol",[a("li",[t._v("ZooKeeper中的节点服务挂了就要选举，在选举期间注册服务瘫痪,虽然服务最终会恢复,但是选举期间不可用的，选举就是该微服务做了集群，必须有一台主其他的都是从")]),t._v(" "),a("li",[t._v("Eureka各个节点是平等关系,服务器挂了没关系，只要有一台Eureka就可以保证服务可用，数据都是最新的。如果查询到的数据并不是最新的，就是因为Eureka的自我保护模式导致的")]),t._v(" "),a("li",[t._v("Eureka本质上是一个工程,而ZooKeeper只是一个进程")]),t._v(" "),a("li",[t._v("Eureka可以很好的应对因网络故障导致部分节点失去联系的情况,而不会像ZooKeeper 一样使得整个注册系统瘫痪")]),t._v(" "),a("li",[t._v("ZooKeeper保证的是CP，Eureka保证的是AP")])]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-ribbon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-ribbon"}},[t._v("#")]),t._v(" Spring Cloud Ribbon")]),t._v(" "),a("h2",{attrs:{id:"什么是ribbon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是ribbon"}},[t._v("#")]),t._v(" 什么是Ribbon？")]),t._v(" "),a("p",[t._v("Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法\nRibbon客户端组件提供一系列完善的配置项，如连接超时，重试等。简单的说，就是在配置文件中列出后面所有的机器，Ribbon会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们也很容易使用Ribbon实现自定义的负载均衡算法。（有点类似Nginx）")]),t._v(" "),a("h2",{attrs:{id:"ribbon底层实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon底层实现原理"}},[t._v("#")]),t._v(" Ribbon底层实现原理")]),t._v(" "),a("p",[t._v("Ribbon使用discoveryClient从注册中心读取目标服务信息，对同一接口请求进行计数，使用%取余算法获取目标服务集群索引，返回获取到的目标服务信息。")]),t._v(" "),a("h2",{attrs:{id:"loadbalanced注解的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loadbalanced注解的作用"}},[t._v("#")]),t._v(" @LoadBalanced注解的作用？")]),t._v(" "),a("p",[t._v("开启客户端负载均衡。")]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-fegin-openfeign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-fegin-openfeign"}},[t._v("#")]),t._v(" Spring Cloud Fegin&&OpenFeign")]),t._v(" "),a("h2",{attrs:{id:"什么是feign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是feign"}},[t._v("#")]),t._v(" 什么是Feign")]),t._v(" "),a("p",[t._v("Feign集成了Ribbon、RestTemplate实现了负载均衡的执行Http调用，只不过对原有的方式（Ribbon+RestTemplate）进行了封装，开发者不必手动使用RestTemplate调服务，而是定义一个接口，在这个接口中标注一个注解即可完成服务调用，这样更加符合面向接口编程的宗旨，简化了开发。")]),t._v(" "),a("h2",{attrs:{id:"什么是openfeign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是openfeign"}},[t._v("#")]),t._v(" 什么是OpenFeign")]),t._v(" "),a("p",[t._v("OpenFeign是springcloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。")]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-hystrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-hystrix"}},[t._v("#")]),t._v(" Spring Cloud Hystrix")]),t._v(" "),a("h2",{attrs:{id:"什么是断路器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是断路器"}},[t._v("#")]),t._v(" 什么是断路器")]),t._v(" "),a("p",[t._v("当一个服务调用另一个服务由于网络原因或自身原因出现问题，调用者就会等待被调用者的响应 当更多的服务请求到这些资源导致更多的请求等待，发生连锁效应（雪崩效应）\n断路器有三种状态")]),t._v(" "),a("ul",[a("li",[t._v("打开状态：一段时间内 达到一定的次数无法调用 并且多次监测没有恢复的迹象 断路器完全打开 那么下次请求就不会请求到该服务")]),t._v(" "),a("li",[t._v("半开状态：短时间内 有恢复迹象 断路器会将部分请求发给该服务，正常调用时 断路器关闭")]),t._v(" "),a("li",[t._v("关闭状态：当服务一直处于正常状态 能正常调用")])]),t._v(" "),a("h2",{attrs:{id:"什么是hystrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是hystrix"}},[t._v("#")]),t._v(" 什么是Hystrix?")]),t._v(" "),a("p",[t._v("在分布式系统，我们一定会依赖各种服务，那么这些个服务一定会出现失败的情况，就会导致雪崩，Hystrix就是这样的一个工具，防雪崩利器，它具有服务降级，服务熔断，服务隔离，监控等一些防止雪崩的技术。\nHystrix有四种防雪崩方式:")]),t._v(" "),a("ul",[a("li",[t._v("服务降级：接口调用失败就调用本地的方法返回一个空")]),t._v(" "),a("li",[t._v("服务熔断：接口调用失败就会进入调用接口提前定义好的一个熔断的方法，返回错误信息")]),t._v(" "),a("li",[t._v("服务隔离：隔离服务之间相互影响")]),t._v(" "),a("li",[t._v("服务监控：在服务发生调用时,会将每秒请求数、成功请求数等运行指标记录下来。")])]),t._v(" "),a("h2",{attrs:{id:"服务熔断与服务降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断与服务降级"}},[t._v("#")]),t._v(" 服务熔断与服务降级")]),t._v(" "),a("p",[t._v("降级是从系统功能优先级的角度考虑如何应对系统故障。\n"),a("strong",[t._v("服务降级")]),t._v("指的是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。\n"),a("strong",[t._v("服务熔断")]),t._v("指的是某个服务故障或者异常，就直接熔断整个服务，而不是一直等到此服务超时。\n熔断和降级是两个比较容易混淆的概念，两者的含义并不相同。\n降级的目的在于应对系统自身的故障，而熔断的目的在于应对当前系统依赖的外部系统或者第三方系统的故障。")]),t._v(" "),a("h2",{attrs:{id:"springcloud-断路器的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-断路器的作用是什么"}},[t._v("#")]),t._v(" SpringCloud 断路器的作用是什么？")]),t._v(" "),a("p",[t._v("在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。")]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-zuul"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-zuul"}},[t._v("#")]),t._v(" Spring Cloud Zuul")]),t._v(" "),a("h2",{attrs:{id:"什么是网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是网关"}},[t._v("#")]),t._v(" 什么是网关")]),t._v(" "),a("p",[t._v("网关相当于一个网络服务架构的入口，所有网络请求必须通过网关转发到具体的服务。")]),t._v(" "),a("h2",{attrs:{id:"网关的作用是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关的作用是什么"}},[t._v("#")]),t._v(" 网关的作用是什么")]),t._v(" "),a("p",[t._v("网关是所有微服务的门户，路由转发仅仅是最基本的功能，除此之外还有其他的一些功能，比如："),a("strong",[t._v("认证")]),t._v("、"),a("strong",[t._v("鉴权")]),t._v("、"),a("strong",[t._v("熔断")]),t._v("、"),a("strong",[t._v("限流")]),t._v("、"),a("strong",[t._v("日志监控")]),t._v("等等.........")]),t._v(" "),a("h2",{attrs:{id:"什么是springcloud-zuul"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是springcloud-zuul"}},[t._v("#")]),t._v(" 什么是SpringCloud Zuul")]),t._v(" "),a("p",[t._v("Zuul是对SpringCloud提供的成熟对的路由方案，他会根据请求的路径不同，网关会定位到指定的微服务，并代理请求到不同的微服务接口，他对外隐蔽了微服务的真正接口地址。")]),t._v(" "),a("ul",[a("li",[t._v("三个重要概念：动态路由表，路由定位，反向代理：\n"),a("ul",[a("li",[t._v("动态路由表：Zuul支持Eureka路由，手动配置路由，这俩种都支持自动更新")]),t._v(" "),a("li",[t._v("路由定位：根据请求路径，Zuul有自己的一套定位服务规则以及路由表达式匹配")]),t._v(" "),a("li",[t._v("反向代理：客户端请求到路由网关，网关受理之后，在对目标发送请求，拿到响应之后在 给客户端")])])]),t._v(" "),a("li",[t._v("它可以和Eureka,Ribbon,Hystrix等组件配合使用，")]),t._v(" "),a("li",[t._v("Zuul的应用场景：\n"),a("ul",[a("li",[t._v("对外暴露，权限校验，服务聚合，日志审计等")])])])]),t._v(" "),a("h1",{attrs:{id:"springcloud-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-gateway"}},[t._v("#")]),t._v(" SpringCloud Gateway")]),t._v(" "),a("h2",{attrs:{id:"spring-cloud-gateway几个必知的术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-gateway几个必知的术语"}},[t._v("#")]),t._v(" Spring Cloud Gateway几个必知的术语？")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("路由（route）")]),t._v("：gateway的基本构建模块。它由ID、目标URI、断言集合和过滤器集合组成。如果聚合断言结果为真，则匹配到该路由。")]),t._v(" "),a("li",[a("strong",[t._v("断言（Predicate ）")]),t._v("：参照Java8的新特性Predicate，允许开发人员匹配HTTP请求中的任何内容，比如头或参数。")]),t._v(" "),a("li",[a("strong",[t._v("过滤器（filter）")]),t._v("：可以在返回请求之前或之后修改请求和响应的内容。")])]),t._v(" "),a("h2",{attrs:{id:"什么是predict-断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是predict-断言"}},[t._v("#")]),t._v(" 什么是Predict（断言）？")]),t._v(" "),a("p",[t._v("Predicate来自于java8的接口。Predicate接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）。\n可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。\nSpring Cloud Gateway内置了许多Predict，这些Predict的源码在org.springframework.cloud.gateway.handler.predicate包中。内置的一些断言如下图：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681365534675-62a10ade-ec4a-4c43-b16e-370334a511fa.png#averageHue=%2312183c&clientId=uc394e9b6-43e2-4&from=paste&height=645&id=u3d8d75c6&originHeight=645&originWidth=1457&originalType=binary&ratio=1&rotation=0&showTitle=false&size=108615&status=done&style=none&taskId=u30e3de75-3485-48f7-b980-dd979d25c0f&title=&width=1457",alt:"image.png"}}),t._v("\n具体可以查看官方文档："),a("a",{attrs:{href:"https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.spring.io/spring-cloud-gateway/docs/2.2.9.RELEASE/reference/html/"),a("OutboundLink")],1),t._v("\n下面就以最后一种权重断言为例介绍一下如何配置。配置如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 路由")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## id只要唯一即可，名称任意")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider_1\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9024")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置断言")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path Route Predicate Factory断言，满足/gateway/provider/**这个请求路径的都会被路由到http://localhost:9024这个uri中")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/gateway/provider/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Weight Route Predicate Factory，同一分组按照权重进行分配流量，这里分配了80%")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 第一个group1是分组名，第二个参数是权重")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Weight=group1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n            \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## id必须唯一")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider_2\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 路由转发的uri")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9025")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置断言")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path Route Predicate Factory断言，满足/gateway/provider/**这个请求路径的都会被路由到http://localhost:9024这个uri中")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/gateway/provider/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Weight Route Predicate Factory，同一分组按照权重进行分配流量，这里分配了20%")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 第一个group1是分组名，第二个参数是权重")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Weight=group1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n")])])]),a("p",[t._v("routes下就是配置的路由策略，各个组件如下：")]),t._v(" "),a("ul",[a("li",[t._v("id：路由的唯一id，名称任意")]),t._v(" "),a("li",[t._v("uri：路由转发的uri")]),t._v(" "),a("li",[t._v("predicates：断言配置，可以配置多个")])]),t._v(" "),a("p",[t._v("Spring Cloud Gateway中的断言命名都是有规范的，格式：xxxRoutePredicateFactory。\n比如权重的断言：WeightRoutePredicateFactory，那么配置时直接取前面的Weight。\n默认的路由转发如果路由到了两个，则是的按照配置先后顺序转发，上面都配置了路径：Path=/gateway/provider/**，如果没有配置权重，则肯定是转发到http://localhost:9024。\n但是既然配置配置了权重并且相同的分组，则按照权重比例进行分配流量")]),t._v(" "),a("h2",{attrs:{id:"什么是过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是过滤器"}},[t._v("#")]),t._v(" 什么是过滤器？")]),t._v(" "),a("p",[t._v("过滤器这个概念很熟悉，在Spring mvc 就接触过，Gateway的过滤器的作用以及生命周期都是类似的。\nGateway的生命周期：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("PRE")]),t._v("：这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择 请求的微服务、记录调试信息等。")]),t._v(" "),a("li",[a("strong",[t._v("POST")]),t._v("：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。")])]),t._v(" "),a("p",[t._v("Gateway 的Filter从作用范围可分为两种:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("GatewayFilter")]),t._v("：应用到单个路由或者一个分组的路由上（需要在配置文件中配置）。")]),t._v(" "),a("li",[a("strong",[t._v("GlobalFilter")]),t._v("：应用到所有的路由上（无需配置，全局生效）")])]),t._v(" "),a("h3",{attrs:{id:"gatewayfilter-局部过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gatewayfilter-局部过滤器"}},[t._v("#")]),t._v(" GatewayFilter（局部过滤器）")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway中内置了许多的局部过滤器，如下图：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681365854962-9cbee142-eee5-46ab-a1e4-26be757fdaa6.png#averageHue=%2314183b&clientId=uc394e9b6-43e2-4&from=paste&height=541&id=u6bcd738c&originHeight=541&originWidth=1886&originalType=binary&ratio=1&rotation=0&showTitle=false&size=272934&status=done&style=none&taskId=u94e5eb86-379e-44c5-a09a-57f2e588057&title=&width=1886",alt:"image.png"}}),t._v("\n局部过滤器需要在指定路由配置才能生效，默认是不生效的。\n以AddResponseHeaderGatewayFilterFactory这个过滤器为例，为原始响应添加Header，配置如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 路由")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## id只要唯一即可，名称任意")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider_1\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9024")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置断言")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path Route Predicate Factory断言，满足/gateway/provider/**这个请求路径的都会被路由到http://localhost:9024这个uri中")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/gateway/provider/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置过滤器（局部）")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" AddResponseHeader=X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Bar\n\n")])])]),a("p",[t._v("浏览器请求，发现响应头中已经有了X-Response-Foo=Bar这个键值对，如下图："),a("br"),t._v(" "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681365907456-a678cb4d-b9ab-4214-a3ac-2fb7b6b59545.png#averageHue=%23fefdfd&clientId=uc394e9b6-43e2-4&from=paste&height=108&id=u7934c942&originHeight=108&originWidth=831&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13892&status=done&style=none&taskId=u6ef19cef-b032-4441-88cb-d878af854d5&title=&width=831",alt:"image.png"}}),t._v(" "),a("strong",[t._v("注意")]),t._v("：过滤器的名称只需要写前缀，过滤器命名必须是xxxGatewayFilterFactory（包括自定义）。")]),t._v(" "),a("h4",{attrs:{id:"自定义局部过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义局部过滤器"}},[t._v("#")]),t._v(" 自定义局部过滤器")]),t._v(" "),a("p",[a("strong",[t._v("场景")]),t._v("：模拟一个授权验证的过程，如果请求头或者请求参数中携带token则放行，否则直接拦截返回"),a("strong",[t._v("401")]),t._v("，代码如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* 名称必须是xxxGatewayFilterFactory形式\n* todo：模拟授权的验证，具体逻辑根据业务完善\n*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeGatewayFilterFactory")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractGatewayFilterFactory")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeGatewayFilterFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AUTHORIZE_TOKEN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"token"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造函数，加载Config")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeGatewayFilterFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//固定写法")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeGatewayFilterFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Loaded GatewayFilterFactory [Authorize]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//读取配置文件中的参数 赋值到 配置类中")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shortcutFieldOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Config.enabled")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"enabled"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthorizeGatewayFilterFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Config")]),t._v(" config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断是否开启授权验证")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEnabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerHttpRequest")]),t._v(" request "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpHeaders")]),t._v(" headers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHeaders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从请求头中获取token")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AUTHORIZE_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//从请求头参数中获取token")]),t._v("\n                    token "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueryParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AUTHORIZE_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerHttpResponse")]),t._v(" response "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果token为空，直接返回401，未授权")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setStatusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UNAUTHORIZED")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//处理完成，直接拦截，不再进行下去")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* todo chain.filter(exchange) 之前的都是过滤器的前置处理\n*\n* chain.filter().then(\n*  过滤器的后置处理...........\n* )\n*/")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//授权正常，继续下一个过滤器链的调用")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Data")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@AllArgsConstructor")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@NoArgsConstructor")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Config")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 控制是否开启认证")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" enabled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("局部过滤器需要在路由中配置才能生效，配置如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 路由")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## id只要唯一即可，名称任意")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider_1\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9024")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置断言")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Path Route Predicate Factory断言，满足/gateway/provider/**这个请求路径的都会被路由到http://localhost:9024这个uri中")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/gateway/provider/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 配置过滤器（局部）")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("filters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" AddResponseHeader=X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Bar\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## AuthorizeGatewayFilterFactory自定义过滤器配置，值为true需要验证授权，false不需要")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Authorize=true\n\n")])])]),a("p",[t._v("此时直接访问：http://localhost:9023/gateway/provider/port，不携带token，返回如下图：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681366049703-fbdd1968-05b4-4f54-bfb8-f15af6dde3e4.png#averageHue=%23f8f7f6&clientId=uc394e9b6-43e2-4&from=paste&height=140&id=u320a5a3d&originHeight=140&originWidth=641&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10521&status=done&style=none&taskId=u05803f02-ca41-4129-95ff-23e9b2ba04b&title=&width=641",alt:"image.png"}}),t._v("\n请求参数带上token：http://localhost:9023/gateway/provider/port?token=abcdcdecd-ddcdeicd12，成功返回，如下图：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681366076978-c5cfc537-7d19-49c9-8aa5-f3d4778d0b09.png#averageHue=%23f8f7f6&clientId=uc394e9b6-43e2-4&from=paste&height=150&id=u0146f066&originHeight=150&originWidth=697&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10802&status=done&style=none&taskId=u1a89d99c-1db2-460a-8c07-46a1dcf1326&title=&width=697",alt:"image.png"}}),t._v("\n上述的AuthorizeGatewayFilterFactory只是涉及到了过滤器的前置处理，后置处理是在chain.filter().then()中的then()方法中完成的，具体可以看下项目源码中的TimeGatewayFilterFactory，代码就不再贴出来了，如下图："),a("br"),t._v(" "),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681366103480-2b27bbce-07ad-43eb-b1eb-556c4b5f1a75.png#averageHue=%23323939&clientId=uc394e9b6-43e2-4&from=paste&height=140&id=u1467c7ea&originHeight=140&originWidth=829&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119626&status=done&style=none&taskId=u79163c15-6af9-41f4-a51e-cf8342b14f5&title=&width=829",alt:"image.png"}})]),t._v(" "),a("h3",{attrs:{id:"globalfilter-全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globalfilter-全局过滤器"}},[t._v("#")]),t._v(" GlobalFilter（全局过滤器）")]),t._v(" "),a("p",[t._v("全局过滤器应用到全部路由上，无需开发者配置，Spring Cloud Gateway也内置了一些全局过滤器，如下图：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681366222396-483309fb-5bb4-4a39-889d-b3c696f15301.png#averageHue=%23111639&clientId=uc394e9b6-43e2-4&from=paste&height=257&id=u8ec38e6a&originHeight=257&originWidth=811&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72884&status=done&style=none&taskId=u99cd1a52-87db-42b1-9966-b6307f010b1&title=&width=811",alt:"image.png"}}),t._v("\nGlobalFilter的功能其实和GatewayFilter是相同的，只是GlobalFilter的作用域是所有的路由配置，而不是绑定在指定的路由配置上。多个GlobalFilter可以通过@Order或者getOrder()方法指定每个GlobalFilter的执行顺序，order值越小，GlobalFilter执行的优先级越高。\n注意，由于过滤器有pre和post两种类型，pre类型过滤器如果order值越小，那么它就应该在pre过滤器链的顶层，post类型过滤器如果order值越小，那么它就应该在pre过滤器链的底层。示意图如下：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1681366249333-9bae064c-d7b0-4df3-beb1-14bcd7d95cde.png#averageHue=%23f7f5f5&clientId=uc394e9b6-43e2-4&from=paste&height=810&id=ue017d1e4&originHeight=810&originWidth=788&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32933&status=done&style=none&taskId=u2917e35b-5bd8-4ac1-8605-d8b7697d893&title=&width=788",alt:"image.png"}})]),t._v(" "),a("p",[t._v("当然除了内置的全局过滤器，实际工作中还需要定制过滤器，下面来介绍一下如何自定义。")]),t._v(" "),a("h4",{attrs:{id:"自定义全局过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义全局过滤器"}},[t._v("#")]),t._v(" 自定义全局过滤器")]),t._v(" "),a("p",[t._v("场景：模拟Nginx的Access Log 功能，记录每次请求的相关信息。代码如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* 实现GlobalFilter\n*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessLogGlobalFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//filter的前置处理")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerHttpRequest")]),t._v(" request "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pathWithinApplication")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InetSocketAddress")]),t._v(" remoteAddress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRemoteAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chain\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//继续调用filter")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//filter的后置处理")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromRunnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerHttpResponse")]),t._v(" response "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")]),t._v(" statusCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStatusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请求路径:{},远程IP地址:{},响应码:{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" remoteAddress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" statusCode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("好了，全局过滤器不必在路由上配置，注入到IOC容器中即可全局生效。\n此时发出一个请求，控制台打印信息如下：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("请求路径"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("gateway"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("provider"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("远程"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v("地址"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64114")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("响应码"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"为什么要集成注册中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要集成注册中心"}},[t._v("#")]),t._v(" 为什么要集成注册中心")]),t._v(" "),a("ul",[a("li",[t._v("使得网关能够从注册中心自动获取uri  ，防止服务的IP的地址一旦修改了，路由配置中的uri必须修改")]),t._v(" "),a("li",[t._v("服务集群中实现负载均衡")])]),t._v(" "),a("h2",{attrs:{id:"如何实现动态路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现动态路由"}},[t._v("#")]),t._v(" 如何实现动态路由")]),t._v(" "),a("p",[t._v("将网关的配置存放到 Nacos 配置中心中，这样由配置中心统一管理，一旦路由发生改变，只需要在配置中心修改，便能达到"),a("strong",[t._v("一处修改，多处生效")]),t._v("的目的。")]),t._v(" "),a("h2",{attrs:{id:"如何实现自定义全局异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现自定义全局异常处理"}},[t._v("#")]),t._v(" 如何实现自定义全局异常处理")]),t._v(" "),a("p",[t._v("直接创建一个自定义全局异常处理类，实现ErrorWebExceptionHandler，重写其中的handle方法")]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-config"}},[t._v("#")]),t._v(" Spring Cloud Config")]),t._v(" "),a("h2",{attrs:{id:"什么是springcloud-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是springcloud-config"}},[t._v("#")]),t._v(" 什么是SpringCLoud Config")]),t._v(" "),a("p",[t._v("Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持，可以方便的对微服务各个环境下的配置进行集中式管理。\nSpring Cloud Config分为Config Server和Config Client两部分。Config Server负责读取配置文件，并且暴露Http API接口，Config Client通过调用Config Server的接口来读取配置文件。")]),t._v(" "),a("h2",{attrs:{id:"springcloud-config可以实现实时刷新吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-config可以实现实时刷新吗"}},[t._v("#")]),t._v(" SpringCloud Config可以实现实时刷新吗")]),t._v(" "),a("p",[t._v("springcloud config实时刷新采用SpringCloud Bus消息总线。")]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-bus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-bus"}},[t._v("#")]),t._v(" Spring Cloud Bus")]),t._v(" "),a("h2",{attrs:{id:"什么是-spring-cloud-bus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring-cloud-bus"}},[t._v("#")]),t._v(" 什么是 Spring Cloud Bus")]),t._v(" "),a("ul",[a("li",[t._v("Spring Cloud Bus就像一个分布式执行器，用于扩展的Spring Boot应用程序的配置文件，但也可以用作应用程序之间的通信通道。")]),t._v(" "),a("li",[t._v("Spring Cloud Bus 不能单独完成通信，需要配合MQ支持")]),t._v(" "),a("li",[t._v("Spring Cloud Bus一般是配合Spring Cloud Config做配置中心的")]),t._v(" "),a("li",[t._v("Springcloud config实时刷新也必须采用SpringCloud Bus消息总线")])]),t._v(" "),a("h1",{attrs:{id:"spring-cloud-sleuth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-sleuth"}},[t._v("#")]),t._v(" Spring Cloud Sleuth")]),t._v(" "),a("h2",{attrs:{id:"分布式链路追踪使用什么实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式链路追踪使用什么实现"}},[t._v("#")]),t._v(" 分布式链路追踪使用什么实现")]),t._v(" "),a("p",[t._v("分布式链路追踪使用 Spring Cloud Sleuth+ zipkin 实现的， Sleuth实现日志采集，zipkin实现可视化。\nzipkin 修改默认http传输改为MQ传输，可以防止数据丢失和进行异步解耦提高性能。\nzipkin 持久化方式是使用 Elasticsearch  进行存储的（默认为内存存储）。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/cbvlog/p/15571496.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/cbvlog/p/15571496.html"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);