(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{387:function(a,t,s){"use strict";s.r(t);var v=s(7),n=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[a._v("#")]),a._v(" 数据类型")]),a._v(" "),t("h2",{attrs:{id:"java-中有哪8中基本数据类型-它们的默认值和占用空间大小知道不-说说这8种基本数据类型对应的包装类型。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中有哪8中基本数据类型-它们的默认值和占用空间大小知道不-说说这8种基本数据类型对应的包装类型。"}},[a._v("#")]),a._v(" Java 中有哪8中基本数据类型?它们的默认值和占用空间大小知道不？说说这8种基本数据类型对应的包装类型。")]),a._v(" "),t("p",[a._v("Java 中有 8 种基本数据类型，分别为：")]),a._v(" "),t("ul",[t("li",[a._v("6 种数字类型：\n"),t("ul",[t("li",[a._v("4 种整数型：byte、short、int、long")]),a._v(" "),t("li",[a._v("2 种浮点型：float、double")])])]),a._v(" "),t("li",[a._v("1 种字符类型：char")]),a._v(" "),t("li",[a._v("1 种布尔型：boolean。")])]),a._v(" "),t("p",[a._v("这 8 种基本数据类型的默认值以及所占空间的大小如下：")]),a._v(" "),t("p",[a._v("| 基本类型")]),a._v(" "),t("p",[a._v("| 位数")]),a._v(" "),t("p",[a._v("| 字节")]),a._v(" "),t("p",[a._v("| 默认值")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th")])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("int")])])])]),a._v(" "),t("p",[a._v("| 32")]),a._v(" "),t("p",[a._v("| 4")]),a._v(" "),t("p",[a._v("| 0")]),a._v(" "),t("p",[a._v("|\n| short")]),a._v(" "),t("p",[a._v("| 16")]),a._v(" "),t("p",[a._v("| 2")]),a._v(" "),t("p",[a._v("| 0")]),a._v(" "),t("p",[a._v("|\n| long")]),a._v(" "),t("p",[a._v("| 64")]),a._v(" "),t("p",[a._v("| 8")]),a._v(" "),t("p",[a._v("| 0L")]),a._v(" "),t("p",[a._v("|\n| byte")]),a._v(" "),t("p",[a._v("| 8")]),a._v(" "),t("p",[a._v("| 1")]),a._v(" "),t("p",[a._v("| 0")]),a._v(" "),t("p",[a._v("|\n| char")]),a._v(" "),t("p",[a._v("| 16")]),a._v(" "),t("p",[a._v("| 2")]),a._v(" "),t("p",[a._v("| 'u0000'")]),a._v(" "),t("p",[a._v("|\n| float")]),a._v(" "),t("p",[a._v("| 32")]),a._v(" "),t("p",[a._v("| 4")]),a._v(" "),t("p",[a._v("| 0f")]),a._v(" "),t("p",[a._v("|\n| double")]),a._v(" "),t("p",[a._v("| 64")]),a._v(" "),t("p",[a._v("| 8")]),a._v(" "),t("p",[a._v("| 0d")]),a._v(" "),t("p",[a._v("|\n| boolean")]),a._v(" "),t("p",[a._v("| 1")]),a._v(" "),t("p",[a._v("|  | false")]),a._v(" "),t("p",[a._v("|")]),a._v(" "),t("p",[a._v("对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。\n这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean 。")]),a._v(" "),t("h2",{attrs:{id:"包装类型的常量池技术了解么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包装类型的常量池技术了解么"}},[a._v("#")]),a._v(" 包装类型的常量池技术了解么")]),a._v(" "),t("p",[a._v("Java 基本类型的包装类的大部分都实现了常量池技术。\nByte,Short,Integer,Long 这 4 种包装类默认创建了数值 "),t("strong",[a._v("[-128，127]")]),a._v(" 的相应类型的缓存数据，Character 创建了数值在[0,127]范围的缓存数据，Boolean 直接返回 True Or False。\n如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。\n两种浮点数类型的包装类 Float,Double 并没有实现常量池技术。")]),a._v(" "),t("h2",{attrs:{id:"为什么要有包装类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有包装类型"}},[a._v("#")]),a._v(" 为什么要有包装类型")]),a._v(" "),t("p",[a._v("Java 本身就是一门 OOP（面向对象编程）语言，对象可以说是 Java 的灵魂。\n除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。比如：")]),a._v(" "),t("ul",[t("li",[a._v("假如你有一个对象中的属性使用了 基本类型，那这个属性就必然存在默认值了。这个逻辑不正确的！因为很多业务场景下，对象的某些属性没有赋值，我就希望它的值为 null。你给我默认赋个值，不是帮倒忙么？")]),a._v(" "),t("li",[a._v("另外，像泛型参数不能是基本类型。因为基本类型不是 Object 子类，应该用基本类型对应的包装类型代替。我们直接拿 JDK 中线程的代码举例。")]),a._v(" "),t("li",[a._v("Java 中的集合在定义类型的时候不能使用基本类型的。比如：")])]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AbstractMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("K")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("V")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Cloneable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Serializable")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Map")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" map "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"什么是自动拆装箱-原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是自动拆装箱-原理"}},[a._v("#")]),a._v(" 什么是自动拆装箱？原理？")]),a._v(" "),t("p",[a._v("Java 中的集合在定义类型的时候不能使用基本类型的。比如：")]),a._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//装箱")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//拆箱")]),a._v("\n")])])]),t("p",[a._v("装箱其实就是调用了 包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。")]),a._v(" "),t("h2",{attrs:{id:"遇见过自动拆装引发的npe问题吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遇见过自动拆装引发的npe问题吗"}},[a._v("#")]),a._v(" 遇见过自动拆装引发的NPE问题吗")]),a._v(" "),t("p",[a._v("两种常见的场景：")]),a._v(" "),t("ol",[t("li",[t("strong",[a._v("数据库的查询结果可能是null，因为自动拆箱，用基本数据类型接收有NPE风险")]),a._v("。因为拆箱其实就是调用了xxxValue()方法，一个null调用方法就会有NPE。")]),a._v(" "),t("li",[t("strong",[a._v("三目运算符condition？表达式1:表达式2中，表达式1和2在类型对齐时，可能抛出因自动拆箱导致的NPE异常")]),a._v("。")])]),a._v(" "),t("h1",{attrs:{id:"面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[a._v("#")]),a._v(" 面向对象")]),a._v(" "),t("h2",{attrs:{id:"string、stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[a._v("#")]),a._v(" String、StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?")]),a._v(" "),t("p",[a._v("区别：")]),a._v(" "),t("ul",[t("li",[a._v("**可变性：**String 不可变，StringBuffer和StringBuilder可变。")]),a._v(" "),t("li",[a._v("**线程安全性：**String 不可变，线程安全。StringBuffer 对方法或者对调用的方法加了同步锁，也是线程安全。StringBuilder 没有对方法加同步锁，所以是非线程安全的。")]),a._v(" "),t("li",[a._v("**性能：**StringBuilder >StringBuffer >String")])]),a._v(" "),t("p",[a._v("String 真正不可变有下面几点原因：")]),a._v(" "),t("ol",[t("li",[a._v("保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。")]),a._v(" "),t("li",[a._v("String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。")])]),a._v(" "),t("h2",{attrs:{id:"重载和重写的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[a._v("#")]),a._v(" 重载和重写的区别？")]),a._v(" "),t("p",[a._v("重载就是同样的⼀个⽅法能够根据输⼊数据的不同，做出不同的处理。\n重写就是当⼦类继承自父类的相同方法，输⼊数据⼀样，但要做出有别于父类的响应时，你就 要覆盖父类方法\n区别：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("区别点")]),a._v(" "),t("th",[a._v("重载方法")]),a._v(" "),t("th",[a._v("重写方法")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("发生范围")]),a._v(" "),t("td",[a._v("同一个类")]),a._v(" "),t("td",[a._v("子类")])]),a._v(" "),t("tr",[t("td",[a._v("参数列表")]),a._v(" "),t("td",[a._v("必须修改")]),a._v(" "),t("td",[a._v("一定不能修改")])]),a._v(" "),t("tr",[t("td",[a._v("返回类型")]),a._v(" "),t("td",[a._v("可修改")]),a._v(" "),t("td",[a._v("子类返回值类型应比父类方法返回值更小或相等")])]),a._v(" "),t("tr",[t("td",[a._v("异常")]),a._v(" "),t("td",[a._v("可修改")]),a._v(" "),t("td",[a._v("子类方法声明抛出异常类应比父类方法声明抛出的异常类更小或相等")])]),a._v(" "),t("tr",[t("td",[a._v("访问修饰符")]),a._v(" "),t("td",[a._v("可修改")]),a._v(" "),t("td",[a._v("一定不能做更严格的限制（可以降低限制）")])]),a._v(" "),t("tr",[t("td",[a._v("发生阶段")]),a._v(" "),t("td",[a._v("编译期")]),a._v(" "),t("td",[a._v("运行期")])])])]),a._v(" "),t("h2",{attrs:{id:"和-equals-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和-equals-的区别"}},[a._v("#")]),a._v(" == 和 equals() 的区别")]),a._v(" "),t("p",[a._v("== 对于基本类型和引用类型的作用效果是不同的：")]),a._v(" "),t("ul",[t("li",[a._v("对于基本数据类型来说，==比较的是值。")]),a._v(" "),t("li",[a._v("对于引用数据类型来说，==比较的是对象的内存地址")])]),a._v(" "),t("p",[a._v("equals() 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals() 方法存在两种使用情况：")]),a._v(" "),t("ul",[t("li",[a._v("类没有重写 equals()方法 ：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。")]),a._v(" "),t("li",[a._v("类重写了 equals()方法 ：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。")])]),a._v(" "),t("h2",{attrs:{id:"深拷贝和浅拷贝区别了解吗-什么是引用拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝和浅拷贝区别了解吗-什么是引用拷贝"}},[a._v("#")]),a._v(" 深拷贝和浅拷贝区别了解吗？什么是引用拷贝？")]),a._v(" "),t("p",[a._v("深拷贝和浅拷贝区别：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("浅拷贝")]),a._v("：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。")]),a._v(" "),t("li",[t("strong",[a._v("深拷贝")]),a._v(" ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。")])]),a._v(" "),t("p",[a._v("引用拷贝就是两个不同的引用指向同一个对象。"),t("br"),a._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676945255375-9a42408a-afd1-4a44-920f-6de60dc8ca7e.png#averageHue=%23fbfbfb&clientId=ud3a16ced-5703-4&from=paste&height=255&id=u1fe5818c&originHeight=383&originWidth=1256&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=93973&status=done&style=none&taskId=ua7465434-1b9a-4a8a-abbe-42364cc5a5b&title=&width=837.3333333333334",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"接口和抽象类有什么共同点和区别-如何选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口和抽象类有什么共同点和区别-如何选择"}},[a._v("#")]),a._v(" 接口和抽象类有什么共同点和区别？如何选择？")]),a._v(" "),t("p",[t("strong",[a._v("共同点")]),a._v(" ：")]),a._v(" "),t("ul",[t("li",[a._v("都不能被实例化。")]),a._v(" "),t("li",[a._v("都可以包含抽象方法。")]),a._v(" "),t("li",[a._v("都可以有默认实现的方法（Java 8 可以用 default 关键字在接口中定义默认方法）。")])]),a._v(" "),t("p",[t("strong",[a._v("区别")]),a._v(" ：")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系")]),a._v("。")]),a._v(" "),t("li",[a._v("一个类只能继承一个类，但是可以实现多个接口。")]),a._v(" "),t("li",[a._v("接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值。")])]),a._v(" "),t("h1",{attrs:{id:"反射-注解-泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射-注解-泛型"}},[a._v("#")]),a._v(" 反射&注解&泛型")]),a._v(" "),t("h2",{attrs:{id:"java-反射-反射有什么优点-缺点-你是怎么理解反射的-为什么框架需要反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-反射-反射有什么优点-缺点-你是怎么理解反射的-为什么框架需要反射"}},[a._v("#")]),a._v(" Java 反射？反射有什么优点/缺点？你是怎么理解反射的（为什么框架需要反射）？")]),a._v(" "),t("p",[a._v("反射赋予了我们在运行时分析类以及执行类中方法的能力。通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\n反射可以让我们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。不过，反射让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点。\n像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制这些框架中也大量使用了动态代理，而动态代理的实现也依赖反射。")]),a._v(" "),t("h2",{attrs:{id:"java-泛型了解么-泛型的作用-什么是类型擦除-泛型有哪些限制-介绍一下常用的通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-泛型了解么-泛型的作用-什么是类型擦除-泛型有哪些限制-介绍一下常用的通配符"}},[a._v("#")]),a._v(" Java 泛型了解么？泛型的作用？什么是类型擦除？泛型有哪些限制？介绍一下常用的通配符？")]),a._v(" "),t("p",[t("strong",[a._v("Java 泛型（Generics）")]),a._v(" 是 JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。\n"),t("strong",[a._v("Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。")])]),a._v(" "),t("h1",{attrs:{id:"spi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spi"}},[a._v("#")]),a._v(" SPI")]),a._v(" "),t("h2",{attrs:{id:"什么是spi-有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是spi-有什么用"}},[a._v("#")]),a._v(" 什么是SPI？有什么用？")]),a._v(" "),t("p",[a._v("SPI 即 Service Provider Interface ，字面意思就是：“服务提供者的接口”，我的理解是：专门提供给服务提供者或者扩展框架功能的开发者去使用的一个接口。\nSPI 将服务接口和具体的服务实现分离开来，将服务调用方和服务实现者解耦，能够提升程序的扩展性、可维护性。修改或者替换服务实现并不需要修改调用方。\n很多框架都使用了 Java 的 SPI 机制，比如：Spring 框架、数据库加载驱动、日志接口、以及 Dubbo 的扩展实现等等。\n"),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676946811293-b40fa5f1-83cc-4b20-8bd7-9a6a55029228.png#averageHue=%23f4f4f4&clientId=ud3a16ced-5703-4&from=paste&height=578&id=u2f7e0464&originHeight=867&originWidth=777&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=118481&status=done&style=none&taskId=u9f073f68-630e-4242-b259-929c3a7f2f7&title=&width=518",alt:"image.png"}})]),a._v(" "),t("h2",{attrs:{id:"spi和api有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spi和api有什么区别"}},[a._v("#")]),a._v(" SPI和API有什么区别")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676946874834-c4441ac1-0048-400c-8741-abe726f5515a.png#averageHue=%23f8f8f8&clientId=ud3a16ced-5703-4&from=paste&height=652&id=u1ede073b&originHeight=978&originWidth=1198&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=90531&status=done&style=none&taskId=u628496db-4d05-4d6a-b8f2-9993c4ddb48&title=&width=798.6666666666666",alt:"image.png"}}),a._v("\n一般模块之间都是通过接口进行通讯，那我们在服务调用方和服务实现方（也称服务提供者）之间引入一个“接口”。\n"),t("strong",[a._v("API")]),a._v("：当实现方提供了接口和实现，我们可以通过调用实现方的接口从而拥有实现方给我们提供的能力，这就是 "),t("strong",[a._v("API ，这种接口和实现都是放在实现方的")]),a._v("。\n"),t("strong",[a._v("SPI")]),a._v("：当"),t("strong",[a._v("接口存在于调用方这边时，就是 SPI")]),a._v(" ，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。")])])}),[],!1,null,null,null);t.default=n.exports}}]);