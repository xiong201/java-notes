(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{395:function(t,a,r){"use strict";r.r(a);var e=r(7),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"为什么要有-springboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有-springboot"}},[t._v("#")]),t._v(" 为什么要有 SpringBoot")]),t._v(" "),a("p",[t._v("Spring 旨在简化 J2EE 企业应用程序开发。Spring Boot 旨在简化 Spring 开发（减少配置文件，开箱即用！）。\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676948140276-c59ba389-f2b8-462c-8c1e-8e92f95e15a8.png#averageHue=%23e6ebd8&clientId=uaedff8d6-ed46-4&from=paste&height=664&id=u724d7dda&originHeight=996&originWidth=528&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56981&status=done&style=none&taskId=u4780ac56-39f3-4b28-83e6-a26bfdb2332&title=&width=352",alt:"image.png"}})]),t._v(" "),a("h1",{attrs:{id:"说出使用springboot的主要优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说出使用springboot的主要优点"}},[t._v("#")]),t._v(" 说出使用SpringBoot的主要优点")]),t._v(" "),a("ol",[a("li",[t._v("开发基于 Spring 的应用程序很容易。")]),t._v(" "),a("li",[t._v("Spring Boot 项目所需的开发或工程时间明显减少，通常会提高整体生产力。")]),t._v(" "),a("li",[t._v("Spring Boot 不需要编写大量样板代码、XML 配置和注")]),t._v(" "),a("li",[t._v("Spring 引导应用程序可以很容易地与 Spring 生态系统集成，如 Spring JDBC、Spring ORM、Spring Data、Spring Security 等。")]),t._v(" "),a("li",[t._v("Spring Boot 遵循“固执己见的默认配置”，以减少开发工作（默认配置可以修改）。")]),t._v(" "),a("li",[t._v("Spring Boot 应用程序提供嵌入式 HTTP 服务器，如 Tomcat 和 Jetty，可以轻松地开发和测试 web 应用程序。（这点很赞！普通运行 Java 程序的方式就能运行基于 Spring Boot web 项目，省事很多）")]),t._v(" "),a("li",[t._v("Spring Boot 提供命令行接口(CLI)工具，用于开发和测试 Spring Boot 应用程序，如 Java 或 Groovy。")]),t._v(" "),a("li",[t._v("Spring Boot 提供了多种插件，可以使用内置工具(如 Maven 和 Gradle)开发和测试 Spring Boot 应用程序。")])]),t._v(" "),a("h1",{attrs:{id:"什么是springboot-starters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是springboot-starters"}},[t._v("#")]),t._v(" 什么是SpringBoot Starters")]),t._v(" "),a("p",[t._v("Spring Boot Starters 是一系列依赖关系的集合，因为它的存在，项目的依赖之间的关系对我们来说变的更加简单了。")]),t._v(" "),a("p",[t._v("举个例子：在没有 Spring Boot Starters 之前，我们开发 REST 服务或 Web 应用程序时; 我们需要使用像 Spring MVC，Tomcat 和 Jackson 这样的库，这些依赖我们需要手动一个一个添加。但是，有了 Spring Boot Starters 我们只需要一个只需添加一个"),a("strong",[t._v("spring-boot-starter-web")]),t._v("一个依赖就可以了，这个依赖包含的子依赖中包含了我们开发 REST 服务需要的所有依赖。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spirng-boot-starter-web"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h1",{attrs:{id:"spring-boot-支持哪些内嵌servlet容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-支持哪些内嵌servlet容器"}},[t._v("#")]),t._v(" Spring Boot 支持哪些内嵌Servlet容器")]),t._v(" "),a("p",[t._v("Spring Boot 支持以下嵌入式 Servlet 容器:")]),t._v(" "),a("p",[t._v("| "),a("strong",[t._v("Name")])]),t._v(" "),a("p",[t._v("| "),a("strong",[t._v("Servlet Version")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Tomcat 9.0")])])])]),t._v(" "),a("p",[t._v("| 4.0")]),t._v(" "),a("p",[t._v("|\n| Jetty 9.4")]),t._v(" "),a("p",[t._v("| 3.1")]),t._v(" "),a("p",[t._v("|\n| Undertow 2.0")]),t._v(" "),a("p",[t._v("| 4.0 |")]),t._v(" "),a("h1",{attrs:{id:"介绍一下-springbootapplication-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下-springbootapplication-注解"}},[t._v("#")]),t._v(" 介绍一下@SpringBootApplication 注解")]),t._v(" "),a("p",[t._v("@SpringBootApplication可以看作是 @Configuration。@EnableAutoConfiguration、@ComponentScan 注解的集合。根据 SpringBoot 官网，这三个注解的作用分别是：")]),t._v(" "),a("ul",[a("li",[t._v("@EnableAutoConfiguration：启用 SpringBoot 的自动配置机制")]),t._v(" "),a("li",[t._v("@ComponentScan： 扫描被@Component (@Service,@Controller)注解的 bean，注解默认会扫描该类所在的包下所有的类。")]),t._v(" "),a("li",[t._v("@Configuration：允许在上下文中注册额外的 bean 或导入其他配置类")])]),t._v(" "),a("h1",{attrs:{id:"springboot的自动配置是如何实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot的自动配置是如何实现的"}},[t._v("#")]),t._v(" SpringBoot的自动配置是如何实现的")]),t._v(" "),a("p",[t._v("这个是因为@SpringBootApplication注解的原因，在上一个问题中已经提到了这个注解。我们知道 @SpringBootApplication看作是 @Configuration、@EnableAutoConfiguration、@ComponentScan 注解的集合。\n"),a("strong",[t._v("@EnableAutoConfiguration是启动自动配置的关键")]),t._v("\n@EnableAutoConfiguration 注解通过 Spring 提供的 @Import 注解导入了AutoConfigurationImportSelector类（@Import 注解可以导入配置类或者 Bean 到当前类中）。\nAutoConfigurationImportSelector类中getCandidateConfigurations方法会将所有自动配置类的信息以 List 的形式返回。这些配置信息会被 Spring 容器作 bean 来管理。\n自动配置信息有了，那么自动配置还差什么呢？\n"),a("strong",[t._v("@Conditional 注解")]),t._v("。@ConditionalOnClass(指定的类必须存在于类路径下),@ConditionalOnBean(容器中是否有指定的 Bean)等等都是对@Conditional注解的扩展。")]),t._v(" "),a("p",[t._v("拿 Spring Security 的自动配置举个例子:SecurityAutoConfiguration中导入了WebSecurityEnablerConfiguration类，WebSecurityEnablerConfiguration类中使用@ConditionalOnBean指定了容器中必须还有WebSecurityConfigurerAdapter 类或其实现类。所以，一般情况下 Spring Security 配置类都会去实现 WebSecurityConfigurerAdapter，这样自动将配置就完成了。")]),t._v(" "),a("h1",{attrs:{id:"开发restful-web服务常用的注解有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发restful-web服务常用的注解有哪些"}},[t._v("#")]),t._v(" 开发RESTful Web服务常用的注解有哪些")]),t._v(" "),a("p",[a("strong",[t._v("Spring Bean 相关：")])]),t._v(" "),a("ul",[a("li",[t._v("@Autowired : 自动导入对象到类中，被注入进的类同样要被 Spring 容器管理。")]),t._v(" "),a("li",[t._v("@RestController : @RestController注解是@Controller和@ResponseBody的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器。")]),t._v(" "),a("li",[t._v("@Component ：通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component 注解标注。")]),t._v(" "),a("li",[t._v("@Repository : 对应持久层即 Dao 层，主要用于数据库相关操作。")]),t._v(" "),a("li",[t._v("@Service : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。")]),t._v(" "),a("li",[t._v("@Controller : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 Service 层返回数据给前端页面。")])]),t._v(" "),a("p",[a("strong",[t._v("处理常见的 HTTP 请求类型：")])]),t._v(" "),a("ul",[a("li",[t._v("@GetMapping : GET 请求、")]),t._v(" "),a("li",[t._v("@PostMapping : POST 请求。")]),t._v(" "),a("li",[t._v("@PutMapping : PUT 请求。")]),t._v(" "),a("li",[t._v("@DeleteMapping : DELETE 请求。")])]),t._v(" "),a("p",[a("strong",[t._v("前后端传值：")])]),t._v(" "),a("ul",[a("li",[t._v("@RequestParam以及@Pathvairable ：@PathVariable用于获取路径参数，@RequestParam用于获取查询参数。")]),t._v(" "),a("li",[t._v("@RequestBody ：用于读取 Request 请求（可能是 POST,PUT,DELETE,GET 请求）的 body 部分并且 Content-Type 为 application/json 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上去。系统会使用HttpMessageConverter或者自定义的HttpMessageConverter将请求的 body 中的 json 字符串转换为 java 对象。")])]),t._v(" "),a("h1",{attrs:{id:"spring-boot-常用的两种配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-常用的两种配置文件"}},[t._v("#")]),t._v(" Spring Boot 常用的两种配置文件")]),t._v(" "),a("p",[t._v("我们可以通过 application.properties或者 application.yml 对 Spring Boot 程序进行简单的配置。如果，你不进行配置的话，就是使用的默认配置。")]),t._v(" "),a("h1",{attrs:{id:"什么是yaml-yaml配置的优势在哪里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是yaml-yaml配置的优势在哪里"}},[t._v("#")]),t._v(" 什么是YAML？YAML配置的优势在哪里")]),t._v(" "),a("p",[t._v("YAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。")]),t._v(" "),a("p",[t._v("相比于 Properties 配置的方式，YAML 配置的方式更加直观清晰，简介明了，有层次感。\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676956561282-2d496e47-3c3b-4fd3-ae18-615599d05c38.png#averageHue=%23f1f2f2&clientId=u591261ab-1a54-4&from=paste&height=465&id=ud7406424&originHeight=697&originWidth=1186&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=78077&status=done&style=none&taskId=u81de22db-32af-4ac9-b088-94ded3d8543&title=&width=790.6666666666666",alt:"image.png"}}),t._v("\n但是，YAML 配置的方式有一个缺点，那就是不支持 @PropertySource 注解导入自定义的 YAML 配置。")]),t._v(" "),a("h1",{attrs:{id:"spring-boot常用的读取配置的方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot常用的读取配置的方法有哪些"}},[t._v("#")]),t._v(" Spring Boot常用的读取配置的方法有哪些")]),t._v(" "),a("ol",[a("li",[t._v("通过@Value读取比较简单的配置信息（不推荐使用）")]),t._v(" "),a("li",[t._v("通过@ConfigurationProperties读取并与bean绑定")]),t._v(" "),a("li",[t._v("通过@ConfigurationProperties读取并校验")]),t._v(" "),a("li",[t._v("@PropertySource读取指定的 properties 文件")])]),t._v(" "),a("h1",{attrs:{id:"spring-boot-加载配置文件的优先级了解吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-加载配置文件的优先级了解吗"}},[t._v("#")]),t._v(" Spring Boot 加载配置文件的优先级了解吗")]),t._v(" "),a("p",[t._v("Spring 读取配置文件也是有优先级的，直接上图：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/21516648/1676957031096-348576fd-c6b2-4dfe-8e23-e1d8d064941d.png#averageHue=%23393f43&clientId=u591261ab-1a54-4&from=paste&height=666&id=u32ede4c0&originHeight=999&originWidth=854&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=334346&status=done&style=none&taskId=ua1ca4d84-59a3-48dc-bbbb-0315d421824&title=&width=569.3333333333334",alt:"image.png"}})]),t._v(" "),a("p",[t._v("更对内容请查看官方文档："),a("a",{attrs:{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"常见的bean映射工具有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的bean映射工具有哪些"}},[t._v("#")]),t._v(" 常见的Bean映射工具有哪些")]),t._v(" "),a("p",[t._v("我们经常在代码中会对一个数据结构封装成DO、SDO、DTO、VO等，而这些Bean中的大部分属性都是一样的，所以使用属性拷贝类工具可以帮助我们节省大量的 set 和 get 操作。")]),t._v(" "),a("p",[t._v("常用的 Bean 映射工具有：Spring BeanUtils、Apache BeanUtils、MapStruct、ModelMapper、Dozer、Orika、JMapper 。")]),t._v(" "),a("p",[t._v("由于 Apache BeanUtils 、Dozer 、ModelMapper 性能太差，所以不建议使用。MapStruct 性能更好而且使用起来比较灵活，是一个比较不错的选择。")]),t._v(" "),a("h1",{attrs:{id:"spring-boot-如何监控系统实际运行状况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-如何监控系统实际运行状况"}},[t._v("#")]),t._v(" Spring Boot 如何监控系统实际运行状况")]),t._v(" "),a("p",[t._v("我们可以使用 Spring Boot Actuator 来对 Spring Boot 项目进行简单的监控。")]),t._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-actuator"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("集成了这个模块之后，你的 Spring Boot 应用程序就自带了一些开箱即用的获取程序运行时的内部状态信息的 API。")]),t._v(" "),a("p",[t._v("比如通过 GET 方法访问 /health 接口，你就可以获取应用程序的健康指标。")]),t._v(" "),a("h1",{attrs:{id:"springboot如何做请求参数校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot如何做请求参数校验"}},[t._v("#")]),t._v(" SpringBoot如何做请求参数校验")]),t._v(" "),a("p",[t._v("数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。")]),t._v(" "),a("p",[t._v("Spring Boot 程序做请求参数校验的话只需要spring-boot-starter-web 依赖就够了，它的子依赖包含了我们所需要的东西。")]),t._v(" "),a("h2",{attrs:{id:"校验注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#校验注解"}},[t._v("#")]),t._v(" 校验注解")]),t._v(" "),a("p",[a("strong",[t._v("JSR 提供的校验注解")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("@Null 被注释的元素必须为 null")]),t._v(" "),a("li",[t._v("@NotNull 被注释的元素必须不为 null")]),t._v(" "),a("li",[t._v("@AssertTrue 被注释的元素必须为 true")]),t._v(" "),a("li",[t._v("@AssertFalse 被注释的元素必须为 false")]),t._v(" "),a("li",[t._v("@Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值")]),t._v(" "),a("li",[t._v("@Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值")]),t._v(" "),a("li",[t._v("@DecimalMin(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值")]),t._v(" "),a("li",[t._v("@DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值")]),t._v(" "),a("li",[t._v("@Size(max=, min=) 被注释的元素的大小必须在指定的范围内")]),t._v(" "),a("li",[t._v("@Digits (integer, fraction) 被注释的元素必须是一个数字，其值必须在可接受的范围内")]),t._v(" "),a("li",[t._v("@Past 被注释的元素必须是一个过去的日期")]),t._v(" "),a("li",[t._v("@Future 被注释的元素必须是一个将来的日期")]),t._v(" "),a("li",[t._v("@Pattern(regex=,flag=) 被注释的元素必须符合指定的正则表达式")])]),t._v(" "),a("p",[a("strong",[t._v("Hibernate Validator 提供的校验注解")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("@NotBlank(message =) 验证字符串非 null，且长度必须大于 0")]),t._v(" "),a("li",[t._v("@Email 被注释的元素必须是电子邮箱地址")]),t._v(" "),a("li",[t._v("@Length(min=,max=) 被注释的字符串的大小必须在指定的范围内")]),t._v(" "),a("li",[t._v("@NotEmpty 被注释的字符串的必须非空")]),t._v(" "),a("li",[t._v("@Range(min=,max=,message=) 被注释的元素必须在合适的范围内")])]),t._v(" "),a("h2",{attrs:{id:"验证请求体-requestbody"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证请求体-requestbody"}},[t._v("#")]),t._v(" 验证请求体(RequestBody)")]),t._v(" "),a("p",[t._v("我们在需要验证的参数上加上了@Valid 注解，如果验证失败，它将抛出MethodArgumentNotValidException。默认情况下，Spring 会将此异常转换为 HTTP Status 400（错误请求）。")]),t._v(" "),a("h2",{attrs:{id:"验证请求参数-path-variables-和-request-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证请求参数-path-variables-和-request-parameters"}},[t._v("#")]),t._v(" 验证请求参数(Path Variables 和 Request Parameters)")]),t._v(" "),a("p",[t._v("一定一定不要忘记在类上加上 Validated 注解了，这个参数可以告诉 Spring 去校验方法参数。")]),t._v(" "),a("h1",{attrs:{id:"如何使用spring-boot实现全局异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用spring-boot实现全局异常处理"}},[t._v("#")]),t._v(" 如何使用Spring Boot实现全局异常处理")]),t._v(" "),a("p",[t._v("可以使用 @ControllerAdvice 和 @ExceptionHandler 处理全局异常。")]),t._v(" "),a("p",[t._v("更多内容请参考我的原创 ："),a("a",{attrs:{href:"https://snailclimb.gitee.io/springboot-guide/#/./docs/advanced/springboot-handle-exception-plus",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 异常处理在实际项目中的应用"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"spring-boot-中如何实现定时任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-中如何实现定时任务"}},[t._v("#")]),t._v(" Spring Boot 中如何实现定时任务")]),t._v(" "),a("p",[t._v("我们使用 @Scheduled 注解就能很方便地创建一个定时任务。")]),t._v(" "),a("p",[t._v("单纯依靠 @Scheduled 注解 还不行，我们还需要在 SpringBoot 中我们只需要在启动类上加上@EnableScheduling 注解，这样才可以启动定时任务。@EnableScheduling 注解的作用是发现注解 @Scheduled 的任务并在后台执行该任务。")])])}),[],!1,null,null,null);a.default=n.exports}}]);