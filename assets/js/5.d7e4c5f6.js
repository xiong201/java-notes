(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{335:function(a,t,s){"use strict";s.r(t);var r=s(7),n=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),t("p",[a._v("**数组（Array）**是一种常见的数据结构。由相同类型的元素组成，并且使用一块连续的内存来存储。")]),a._v(" "),t("p",[a._v("可以利用元素的索引计算出该元素对应的存储地址。")]),a._v(" "),t("p",[a._v("数组的特点是："),t("strong",[a._v("提供随机访问，并且容量有限")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("假如数组的长度为 n。\n访问：O（1）//访问特定位置的元素\n插入：O（n ）//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时\n删除：O（n）//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时\n")])])]),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665890444513-c5b62011-9717-4047-a6b8-50aa30b982c5-1666940658830-78.png",alt:"img"}})]),a._v(" "),t("h2",{attrs:{id:"链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[a._v("#")]),a._v(" 链表")]),a._v(" "),t("p",[a._v("**链表（LinkedList）**不会按线性的顺序存储数据，使用的不是连续的内存空间存储数据。")]),a._v(" "),t("p",[a._v("链表的插入和删除操作的时间复杂度为 O(1)，只需要知道目标位置元素上一个元素就可以。但是，查找一个节点或者访问特定位置的节点时间复杂度为 O(n)。")]),a._v(" "),t("p",[a._v("链表结构可以克服数组需要预知数据大小的缺点，充分利用计算机的内存空间，实现内存动态管理。但链表不会节省空间，相比于数组会占用更多的空间，因为链表每个节点还存放指向其他节点的指针。除此之外，链表不具有数组随机读取的优点。")]),a._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("假如链表中有n个元素。\n访问：O（n）//访问特定位置的元素\n插入删除：O（1）//必须要要知道插入元素的位置\n")])])]),t("h3",{attrs:{id:"单链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单链表"}},[a._v("#")]),a._v(" 单链表")]),a._v(" "),t("p",[a._v("单向链表只有一个方向，结点只有一个后继指针 next 指向后面的节点。因此，链表这种数据结构通常在物理内存上是不连续的。我们习惯性地把第一个结点叫作头结点，链表通常有一个不保存任何值的 head 节点(头结点)，通过头结点我们可以遍历整个链表。尾结点通常指向 null。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665897119272-8909d073-2e7d-4b8c-a030-83fa35e6b580-1666940658830-80.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"双向链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双向链表"}},[a._v("#")]),a._v(" 双向链表")]),a._v(" "),t("p",[a._v("包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665897159070-a6a8fd11-7a67-4bc3-a107-b974027d73dd-1666940658830-82.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"循环链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环链表"}},[a._v("#")]),a._v(" 循环链表")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665897187529-b986d32a-914a-49e7-b37b-9c4217bd0fb4-1666940658830-84.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"双向循环链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双向循环链表"}},[a._v("#")]),a._v(" 双向循环链表")]),a._v(" "),t("p",[a._v("最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665899871973-c6a383c6-be71-4982-bf43-97b91eaa678b-1666940658830-88.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"链表-vs-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#链表-vs-数组"}},[a._v("#")]),a._v(" 链表 vs 数组")]),a._v(" "),t("ul",[t("li",[a._v("数组支持随机访问，而链表不支持。")]),a._v(" "),t("li",[a._v("数组使用的是连续内存空间对 CPU 的缓存机制友好，链表则相反。")]),a._v(" "),t("li",[a._v("数组的大小固定，而链表则天然支持动态扩容。如果声明的数组过小，需要另外申请一个更大的内存空间存放数组元素，然后将原数组拷贝进去，这个操作是比较耗时的！")])]),a._v(" "),t("p",[t("strong",[a._v("应用场景")]),a._v("：")]),a._v(" "),t("ul",[t("li",[a._v("如果需要支持随机访问的话，链表没办法做到。")]),a._v(" "),t("li",[a._v("如果需要存储的数据元素的个数不确定，并且需要经常添加和删除数据的话，使用链表比较合适。")]),a._v(" "),t("li",[a._v("如果需要存储的数据元素的个数确定，并且不需要经常添加和删除数据的话，使用数组比较合适。")])]),a._v(" "),t("h2",{attrs:{id:"栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[a._v("#")]),a._v(" 栈")]),a._v(" "),t("p",[t("strong",[a._v("栈")]),a._v(" (stack)只允许在有序的线性数据集合的一端（称为栈顶 top）进行加入数据（push）和移除数据（pop）。因而按照 "),t("strong",[a._v("后进先出（LIFO, Last In First Out）")]),a._v(" 的原理运作。"),t("strong",[a._v("在栈中，push 和 pop 的操作都发生在栈顶。")])]),a._v(" "),t("p",[a._v("栈常用一维数组或链表来实现，用数组实现的栈叫作 "),t("strong",[a._v("顺序栈")]),a._v(" ，用链表实现的栈叫作 "),t("strong",[a._v("链式栈")]),a._v(" 。不管基于数组还是链表，入栈、出栈的时间复杂度都为 O(1)。")]),a._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("假设堆栈中有n个元素。\n访问：O（n）//最坏情况\n插入删除：O（1）//顶端插入和删除元素\n")])])]),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665900007492-f4ee4032-c848-433a-95ec-4291fc932573-1666940658830-90.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"栈的常见应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈的常见应用场景"}},[a._v("#")]),a._v(" 栈的常见应用场景")]),a._v(" "),t("p",[a._v("当我们我们要处理的数据只涉及在一端插入和删除数据，并且满足 "),t("strong",[a._v("后进先出（LIFO, Last In First Out）")]),a._v(" 的特性时，我们就可以使用栈这个数据结构。")]),a._v(" "),t("h4",{attrs:{id:"实现浏览器的回退和前进功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现浏览器的回退和前进功能"}},[a._v("#")]),a._v(" 实现浏览器的回退和前进功能")]),a._v(" "),t("p",[a._v("我们只需要使用两个栈(Stack1 和 Stack2)和就能实现这个功能。比如你按顺序查看了 1,2,3,4 这四个页面，我们依次把 1,2,3,4 这四个页面压入 Stack1 中。当你想回头看 2 这个页面的时候，你点击回退按钮，我们依次把 4,3 这两个页面从 Stack1 弹出，然后压入 Stack2 中。假如你又想回到页面 3，你点击前进按钮，我们将 3 页面从 Stack2 弹出，然后压入到 Stack1 中。示例图如下:")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665897226707-cd4be710-68cd-4058-a0ff-fe10e759fc40-1666940658830-86.png",alt:"img"}})]),a._v(" "),t("h4",{attrs:{id:"检查符号是否成对出现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检查符号是否成对出现"}},[a._v("#")]),a._v(" 检查符号是否成对出现")]),a._v(" "),t("p",[a._v("给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断该字符串是否有效。")]),a._v(" "),t("p",[a._v("有效字符串需满足：")]),a._v(" "),t("ol",[t("li",[a._v("左括号必须用相同类型的右括号闭合。")]),a._v(" "),t("li",[a._v("左括号必须以正确的顺序闭合。")])]),a._v(" "),t("p",[a._v('比如 "()"、"()[]{}"、"{[]}" 都是有效字符串，而 "(]" 、"([)]" 则不是。')]),a._v(" "),t("p",[a._v("这个问题实际是 Leetcode 的一道题目，我们可以利用栈 Stack 来解决这个问题。")]),a._v(" "),t("ol",[t("li",[a._v("首先我们将括号间的对应规则存放在 Map 中，这一点应该毋容置疑；")]),a._v(" "),t("li",[a._v("创建一个栈。遍历字符串，如果字符是左括号就直接加入stack中，否则将stack 的栈顶元素与这个括号做比较，如果不相等就直接返回 false。遍历结束，如果stack为空，返回 true。")])]),a._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("  public boolean isVaild(String s) {\n        HashMap<Character, Character> characterHashMap = new HashMap<>();\n        characterHashMap.put(')', '(');\n        characterHashMap.put('}', '{');\n        characterHashMap.put(']', '[');\n        Stack<Character> stack = new Stack<>();\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if(characterHashMap.containsKey(chars[i])) {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                Character character = characterHashMap.get(chars[i]);\n                Character pop = stack.pop();\n                if(!pop.equals(character)) {\n                    return false;\n                }\n            } else {\n                stack.push(chars[i]);\n            }\n        }\n        return stack.isEmpty();\n    }\n")])])]),t("h4",{attrs:{id:"字符串反转"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串反转"}},[a._v("#")]),a._v(" 字符串反转")]),a._v(" "),t("p",[a._v("将字符串中的每个字符先入栈再出栈就可以了。")]),a._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("public String revise(String s) {\n        Stack<Character> stack = new Stack<>();\n        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            stack.push(chars[i]);\n        }\n        int size = stack.size();\n        char[] copyChars = new char[size];\n        for (int i = 0; i < size; i++) {\n            copyChars[i] = stack.pop();\n        }\n\n        return new String(copyChars);\n    }\n")])])]),t("h4",{attrs:{id:"维护函数调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#维护函数调用"}},[a._v("#")]),a._v(" 维护函数调用")]),a._v(" "),t("p",[a._v("最后一个被调用的函数必须先完成执行，符合栈的 "),t("strong",[a._v("后进先出（LIFO, Last In First Out）")]),a._v(" 特性。")]),a._v(" "),t("h2",{attrs:{id:"队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[a._v("#")]),a._v(" 队列")]),a._v(" "),t("h3",{attrs:{id:"队列简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列简介"}},[a._v("#")]),a._v(" 队列简介")]),a._v(" "),t("p",[t("strong",[a._v("队列")]),a._v(" 是 "),t("strong",[a._v("先进先出( FIFO，First In, First Out)")]),a._v(" 的线性表。在具体应用中通常用链表或者数组来实现，用数组实现的队列叫作 "),t("strong",[a._v("顺序队列")]),a._v(" ，用链表实现的队列叫作 "),t("strong",[a._v("链式队列")]),a._v(" 。"),t("strong",[a._v("队列只允许在后端（rear）进行插入操作也就是 入队 enqueue，在前端（front）进行删除操作也就是出队 dequeue")])]),a._v(" "),t("p",[a._v("队列的操作方式和堆栈类似，唯一的区别在于队列只允许新数据在后端进行添加。")]),a._v(" "),t("div",{staticClass:"language-plain extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[a._v("假设队列中有n个元素。\n访问：O（n）//最坏情况\n插入删除：O（1）//后端插入前端删除元素\n")])])]),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665901512087-36223609-068b-4124-bbc2-8db0b219dec5-1666940658830-92.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"队列分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#队列分类"}},[a._v("#")]),a._v(" 队列分类")]),a._v(" "),t("h4",{attrs:{id:"单队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单队列"}},[a._v("#")]),a._v(" 单队列")]),a._v(" "),t("p",[a._v("单队列就是常见的队列, 每次添加元素时，都是添加到队尾。单队列又分为"),t("strong",[a._v("顺序队列（数组实现）")]),a._v(" 和 "),t("strong",[a._v("链式队列（链表实现）")]),a._v("。")]),a._v(" "),t("p",[t("strong",[a._v("顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。")])]),a._v(" "),t("p",[a._v("假设下图是一个顺序队列，我们将前两个元素 1,2 出队，并入队两个元素 7,8。当进行入队、出队操作的时候，front 和 rear 都会持续往后移动（front 指针指向对头元素，rear 指针指向队列最后一个元素的下一位置），当 rear 移动到最后的时候,我们无法再往队列中添加数据，即使数组中还有空余空间，这种现象就是 "),t("strong",[a._v("”假溢出“")]),a._v(" 。除了假溢出问题之外，如下图所示，当添加元素 8 的时候，rear 指针移动到数组之外（越界）。")]),a._v(" "),t("p",[a._v("当 front==rear 的时候队列为空。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665902034558-0247dd64-cc60-43ce-9d63-258c801cf164-1666940658831-96.png",alt:"img"}})]),a._v(" "),t("h4",{attrs:{id:"循环队列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环队列"}},[a._v("#")]),a._v(" 循环队列")]),a._v(" "),t("p",[a._v("循环队列可以解决顺序队列的假溢出和越界问题。解决办法就是：从头开始，这样也就会形成头尾相接的循环，这也就是循环队列名字的由来。")]),a._v(" "),t("p",[a._v("还是用上面的图，我们将 rear 指针指向数组下标为 0 的位置就不会有越界问题了。当我们再向队列中添加元素的时候， rear 向后移动。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/1665901757780-e8b499d7-cbaa-47e3-b872-1bc8fe7607ce-1666940658830-94.png",alt:"img"}})]),a._v(" "),t("p",[a._v("顺序队列中，我们说 front==rear 的时候队列为空，循环队列中则不一样，也可能为满。")]),a._v(" "),t("h4",{attrs:{id:"常见应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见应用场景"}},[a._v("#")]),a._v(" 常见应用场景")]),a._v(" "),t("p",[a._v("当我们需要按照一定顺序来处理数据的时候可以考虑使用队列这个数据结构。")]),a._v(" "),t("ul",[t("li",[t("strong",[a._v("阻塞队列：")]),a._v(" 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。")]),a._v(" "),t("li",[t("strong",[a._v("线程池中的请求/任务队列：")]),a._v(" 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ：FixedThreadPool 使用无界队列 LinkedBlockingQueue。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出java.util.concurrent.RejectedExecutionException 异常。")]),a._v(" "),t("li",[a._v("Linux 内核进程队列（按优先级排队）")]),a._v(" "),t("li",[a._v("现实生活中的派对，播放器上的播放列表;")]),a._v(" "),t("li",[a._v("消息队列")]),a._v(" "),t("li",[a._v("等等......")])])])}),[],!1,null,null,null);t.default=n.exports}}]);