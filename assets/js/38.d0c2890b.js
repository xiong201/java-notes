(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{368:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("通常情况下，一般会选择基于"),s("code",[t._v("Redis")]),t._v("或者"),s("code",[t._v("ZooKeeper")]),t._v("实现分布式锁，"),s("code",[t._v("Redis")]),t._v(" 实现 AP架构的分布式锁，"),s("code",[t._v("ZooKeeper")]),t._v(" 实现CP架构的分布式锁。")]),t._v(" "),s("h1",{attrs:{id:"基于-redis-实现分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-redis-实现分布式锁"}},[t._v("#")]),t._v(" 基于 Redis 实现分布式锁")]),t._v(" "),s("h2",{attrs:{id:"如何基于-redis-实现一个最简易的分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何基于-redis-实现一个最简易的分布式锁"}},[t._v("#")]),t._v(" 如何基于 Redis 实现一个最简易的分布式锁？")]),t._v(" "),s("p",[t._v("不论是本地锁还是分布式锁，核心都在于“互斥”。")]),t._v(" "),s("p",[t._v("在 Redis 中， "),s("code",[t._v("SETNX")]),t._v(" 命令是可以帮助我们实现互斥。"),s("code",[t._v("SETNX")]),t._v(" 即 "),s("strong",[t._v("SET")]),t._v(" if "),s("strong",[t._v("N")]),t._v("ot e"),s("strong",[t._v("X")]),t._v("ists (对应 Java 中的 "),s("code",[t._v("setIfAbsent")]),t._v(" 方法)，如果 key 不存在的话，才会设置 key 的值。如果 key 已经存在， "),s("code",[t._v("SETNX")]),t._v(" 啥也不做。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("> SETNX lockKey uniqueValue\n(integer) 1\n> SETNX lockKey uniqueValue\n(integer) 0\n")])])]),s("p",[t._v("释放锁的话，直接通过 "),s("code",[t._v("DEL")]),t._v(" 命令删除对应的 key 即可。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DEL")]),t._v(" lockKey\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("为了防止误删到其他的锁，这里我们建议使用 Lua 脚本通过 key 对应的 value（唯一值）来判断。")]),t._v(" "),s("p",[t._v("选用 Lua 脚本是为了保证解锁操作的原子性。因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，从而保证了锁释放操作的原子性。")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" 释放锁时，先比较锁对应的 value 值是否相等，避免锁的误释放\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" ARGV"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"del"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("KEYS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),s("p",[t._v("这是一种最简易的 Redis 分布式锁实现，实现方式比较简单，性能也很高效。不过，这种方式实现分布式锁存在一些问题。就比如应用程序遇到一些问题比如释放锁的逻辑突然挂掉，可能会导致锁无法被释放，进而造成共享资源无法再被其他线程/进程访问。")]),t._v(" "),s("h2",{attrs:{id:"为什么要给锁设置一个过期时间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要给锁设置一个过期时间"}},[t._v("#")]),t._v(" 为什么要给锁设置一个过期时间？")]),t._v(" "),s("p",[t._v("为了避免锁无法被释放，我们可以想到的一个解决办法就是："),s("strong",[t._v("给这个 key（也就是锁） 设置一个过期时间")]),t._v(" 。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("127.0.0.1:6379> SET lockKey uniqueValue EX 3 NX\nOK\n")])])]),s("ul",[s("li",[s("strong",[t._v("lockKey")]),t._v("：加锁的锁名；")]),t._v(" "),s("li",[s("strong",[t._v("uniqueValue")]),t._v("：能够唯一标示锁的随机字符串；")]),t._v(" "),s("li",[s("strong",[t._v("NX")]),t._v("：只有当 lockKey 对应的 key 值不存在的时候才能 SET 成功；")]),t._v(" "),s("li",[s("strong",[t._v("EX")]),t._v("：过期时间设置（秒为单位）EX 3 标示这个锁有一个 3 秒的自动过期时间。与 EX 对应的是 PX（毫秒为单位），这两个都是过期时间设置。")])]),t._v(" "),s("p",[s("strong",[t._v("一定要保证设置指定 key 的值和过期时间是一个原子操作！！！")]),t._v(" 不然的话，依然可能会出现锁无法被释放的问题。")]),t._v(" "),s("p",[t._v("这样确实可以解决问题，不过，这种解决办法同样存在漏洞："),s("strong",[t._v("如果操作共享资源的时间大于过期时间，就会出现锁提前过期的问题，进而导致分布式锁直接失效。如果锁的超时时间设置过长，又会影响到性能。")])]),t._v(" "),s("p",[t._v("你或许在想："),s("strong",[t._v("如果操作共享资源的操作还未完成，锁过期时间能够自己续期就好了！")])]),t._v(" "),s("h2",{attrs:{id:"如何实现锁的优雅续期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现锁的优雅续期"}},[t._v("#")]),t._v(" 如何实现锁的优雅续期？")]),t._v(" "),s("p",[t._v("对于 Java 开发的小伙伴来说，已经有了现成的解决方案："),s("strong",[s("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fredisson%2Fredisson",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redisson"),s("OutboundLink")],1)]),t._v(" 。其他语言的解决方案，可以在 Redis 官方文档中找到，地址："),s("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fredis.io%2Ftopics%2Fdistlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://redis.io/topics/distlock"),s("OutboundLink")],1),t._v(" 。")]),t._v(" "),s("p",[t._v("Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，不仅仅包括多种分布式锁的实现。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。")]),t._v(" "),s("p",[t._v("Redisson 中的分布式锁自带自动续期机制，使用起来非常简单，原理也比较简单，其提供了一个专门用来监控和续期锁的 "),s("strong",[t._v("Watch Dog（ 看门狗）")]),t._v("，如果操作共享资源的线程还未执行完成的话，Watch Dog 会不断地延长锁的过期时间，进而保证锁不会因为超时而被释放。")]),t._v(" "),s("p",[t._v("看门狗名字的由来于 "),s("code",[t._v("getLockWatchdogTimeout()")]),t._v(" 方法，这个方法返回的是看门狗给锁续期的过期时间，默认为 30 秒（"),s("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fredisson%2Fredisson%2Freleases%2Ftag%2Fredisson-3.17.6",target:"_blank",rel:"noopener noreferrer"}},[t._v("redisson-3.17.6"),s("OutboundLink")],1),t._v("）。")]),t._v(" "),s("p",[t._v("默认情况下，每过 10 秒，看门狗就会执行续期操作，将锁的超时时间设置为 30 秒。看门狗续期前也会先判断是否需要执行续期操作，需要才会执行续期，否则取消续期操作。")]),t._v(" "),s("blockquote",[s("p",[t._v("默认情况下，看门狗的续期时间是30s，也可以通过修改Config.lockWatchdogTimeout来另行指定。另外Redisson 还提供了可以指定leaseTime参数的加锁方法来指定加锁的时间。超过这个时间后锁便自动解开了，不会延长锁的有效期。")]),t._v(" "),s("p",[t._v("watchDog 只有在未显示指定加锁时间（leaseTime）时才会生效。")])]),t._v(" "),s("p",[t._v("这里以 Redisson 的分布式可重入锁 "),s("code",[t._v("RLock")]),t._v(" 为例来说明如何使用 Redisson 实现分布式锁：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.获取指定的分布式锁对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RLock")]),t._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redisson"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lock"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.拿锁且不设置锁超时时间，具备 Watch Dog 自动续期机制")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.执行业务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4.释放锁")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("只有未指定锁超时时间，才会使用到 Watch Dog 自动续期机制。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 手动给锁设置过期时间，不具备 Watch Dog 自动续期机制")]),t._v("\nlock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("程序释放锁操作时因为异常没有被执行，那么锁无法被释放，所以释放锁操作一定要放到 finally {} 中。")]),t._v(" "),s("p",[s("strong",[t._v("如果释放锁操作本身异常了，watch dog 还会不停的续期吗")]),t._v("？不会，因为无论释放锁操作是否成功，EXPIRATION_RENEWAL_MAP中的目标 ExpirationEntry 对象已经被移除了，watch dog 通过判断后就不会继续给锁续期了。")]),t._v(" "),s("p",[t._v("如果使用 Redis 来实现分布式锁的话，还是比较推荐直接基于 Redisson 来做的。")]),t._v(" "),s("h2",{attrs:{id:"如何实现可重入锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现可重入锁"}},[t._v("#")]),t._v(" 如何实现可重入锁")]),t._v(" "),s("p",[t._v("所谓可重入锁指的是在一个线程中可以多次获取同一把锁，比如一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法即可重入 ，而无需重新获得锁。像 Java 中的 "),s("code",[t._v("synchronized")]),t._v(" 和 "),s("code",[t._v("ReentrantLock")]),t._v(" 都属于可重入锁。")]),t._v(" "),s("p",[s("strong",[t._v("不可重入的分布式锁基本可以满足绝大部分业务场景了，一些特殊的场景可能会需要使用可重入的分布式锁。")])]),t._v(" "),s("p",[t._v("可重入分布式锁的实现核心思路是线程在获取锁的时候判断是否为自己的锁，如果是的话，就不用再重新获取了。为此，我们可以为每个锁关联一个可重入计数器和一个占有它的线程。当可重入计数器大于 0 时，则锁被占有，需要判断占有该锁的线程和请求获取锁的线程是否为同一个。")]),t._v(" "),s("p",[t._v("实际项目中，我们不需要自己手动实现，推荐使用我们上面提到的 "),s("strong",[t._v("Redisson")]),t._v(" ，其内置了多种类型的锁比如可重入锁（Reentrant Lock）、自旋锁（Spin Lock）、公平锁（Fair Lock）、多重锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）。")]),t._v(" "),s("h2",{attrs:{id:"redis-如何解决集群情况下分布式锁的可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-如何解决集群情况下分布式锁的可靠性"}},[t._v("#")]),t._v(" Redis 如何解决集群情况下分布式锁的可靠性？")]),t._v(" "),s("p",[t._v("为了避免单点故障，生产环境下的 Redis 服务通常是集群化部署的。")]),t._v(" "),s("p",[t._v("Redis 集群下，上面介绍到的分布式锁的实现会存在一些问题。由于 Redis 集群数据同步到各个节点时是异步的，如果在 Redis  主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis  主节点依然可以获取锁，所以多个应用服务就可以同时获取到锁。")]),t._v(" "),s("p",[t._v("针对这个问题，Redis 之父 antirez 设计了 "),s("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fredis.io%2Ftopics%2Fdistlock",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redlock 算法"),s("OutboundLink")],1),t._v(" 来解决。")]),t._v(" "),s("p",[t._v("Redlock 算法的思想是让客户端向 Redis 集群中的多个独立的 Redis 实例依次请求申请加锁，如果客户端能够和半数以上的实例成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。")]),t._v(" "),s("p",[t._v("即使部分 Redis 节点出现问题，只要保证 Redis 集群中有半数以上的 Redis 节点可用，分布式锁服务就是正常的。")]),t._v(" "),s("p",[t._v("实际项目中不建议使用 Redlock 算法，成本和收益不成正比。")]),t._v(" "),s("p",[t._v("如果不是非要实现绝对可靠的分布式锁的话，其实单机版 Redis 就完全够了，实现简单，性能也非常高。如果你必须要实现一个绝对可靠的分布式锁的话，可以基于 ZooKeeper 来做，只是性能会差一些。")]),t._v(" "),s("h1",{attrs:{id:"基于-zookeeper-实现分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于-zookeeper-实现分布式锁"}},[t._v("#")]),t._v(" 基于 ZooKeeper 实现分布式锁")]),t._v(" "),s("p",[t._v("Redis 实现分布式锁性能较高，ZooKeeper 实现分布式锁可靠性更高。实际项目中，我们应该根据业务的具体需求来选择。")]),t._v(" "),s("h2",{attrs:{id:"如何基于-zookeeper-实现分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何基于-zookeeper-实现分布式锁"}},[t._v("#")]),t._v(" 如何基于 ZooKeeper 实现分布式锁？")]),t._v(" "),s("p",[t._v("ZooKeeper 分布式锁是基于 "),s("strong",[t._v("临时顺序节点")]),t._v(" 和 "),s("strong",[t._v("Watcher（事件监听器）")]),t._v(" 实现的。")]),t._v(" "),s("p",[t._v("获取锁：")]),t._v(" "),s("ol",[s("li",[t._v("首先我们要有一个持久节点"),s("code",[t._v("/locks")]),t._v("，客户端获取锁就是在"),s("code",[t._v("locks")]),t._v("下创建临时顺序节点。")]),t._v(" "),s("li",[t._v("假设客户端 1 创建了"),s("code",[t._v("/locks/lock1")]),t._v("节点，创建成功之后，会判断 "),s("code",[t._v("lock1")]),t._v("是否是 "),s("code",[t._v("/locks")]),t._v(" 下最小的子节点。")]),t._v(" "),s("li",[t._v("如果 "),s("code",[t._v("lock1")]),t._v("是最小的子节点，则获取锁成功。否则，获取锁失败。")]),t._v(" "),s("li",[t._v("如果获取锁失败，则说明有其他的客户端已经成功获取锁。客户端 1 并不会不停地循环去尝试加锁，而是在前一个节点比如"),s("code",[t._v("/locks/lock0")]),t._v("上注册一个事件监听器。这个监听器的作用是当前一个节点释放锁之后通知客户端 1（避免无效自旋），这样客户端 1 就加锁成功了。")])]),t._v(" "),s("p",[t._v("释放锁：")]),t._v(" "),s("ol",[s("li",[t._v("成功获取锁的客户端在执行完业务流程之后，会将对应的子节点删除。")]),t._v(" "),s("li",[t._v("成功获取锁的客户端在出现故障之后，对应的子节点由于是临时顺序节点，也会被自动删除，避免了锁无法被释放。")]),t._v(" "),s("li",[t._v("我们前面说的事件监听器其实监听的就是这个子节点删除事件，子节点删除就意味着锁被释放。")])]),t._v(" "),s("p",[t._v("实际项目中，推荐使用 Curator 来实现 ZooKeeper 分布式锁。Curator 是 Netflix 公司开源的一套  ZooKeeper Java 客户端框架，相比于 ZooKeeper 自带的客户端 zookeeper 来说，Curator  的封装更加完善，各种 API 都可以比较方便地使用。")]),t._v(" "),s("p",[s("code",[t._v("Curator")]),t._v("主要实现了下面四种锁：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("InterProcessMutex")]),t._v("：分布式可重入排它锁")]),t._v(" "),s("li",[s("code",[t._v("InterProcessSemaphoreMutex")]),t._v("：分布式不可重入排它锁")]),t._v(" "),s("li",[s("code",[t._v("InterProcessReadWriteLock")]),t._v("：分布式读写锁")]),t._v(" "),s("li",[s("code",[t._v("InterProcessMultiLock")]),t._v("：将多个锁作为单个实体管理的容器，获取锁的时候获取所有锁，释放锁也会释放所有锁资源（忽略释放失败的锁）。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CuratorFramework")]),t._v(" client "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ZKUtils")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分布式可重入排它锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessLock")]),t._v(" lock1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMutex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockPath1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 分布式不可重入排它锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessLock")]),t._v(" lock2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessSemaphoreMutex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockPath2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将多个锁作为一个整体")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMultiLock")]),t._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterProcessMultiLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("asList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lock1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lock2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalStateException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"不能获取多锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"已获取多锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是否有第一个锁: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lock1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAcquiredInThisProcess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是否有第二个锁: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lock2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAcquiredInThisProcess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 资源操作")]),t._v("\n    resource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"释放多个锁"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("release")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是否有第一个锁: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lock1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAcquiredInThisProcess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"是否有第二个锁: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lock2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAcquiredInThisProcess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"为什么要用临时顺序节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用临时顺序节点"}},[t._v("#")]),t._v(" 为什么要用临时顺序节点？")]),t._v(" "),s("p",[t._v("每个数据节点在 ZooKeeper 中被称为 "),s("strong",[t._v("znode")]),t._v("，它是 ZooKeeper 中数据的最小单元。")]),t._v(" "),s("p",[t._v("我们通常是将 znode 分为 4 大类：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("持久（PERSISTENT）节点")]),t._v("：一旦创建就一直存在即使 ZooKeeper 集群宕机，直到将其删除。")]),t._v(" "),s("li",[s("strong",[t._v("临时（EPHEMERAL）节点")]),t._v("：临时节点的生命周期是与 "),s("strong",[t._v("客户端会话（session）")]),t._v(" 绑定的，"),s("strong",[t._v("会话消失则节点消失")]),t._v(" 。并且，"),s("strong",[t._v("临时节点只能做叶子节点")]),t._v(" ，不能创建子节点。")]),t._v(" "),s("li",[s("strong",[t._v("持久顺序（PERSISTENT_SEQUENTIAL）节点")]),t._v("：除了具有持久（PERSISTENT）节点的特性之外， 子节点的名称还具有顺序性。比如 "),s("code",[t._v("/node1/app0000000001")]),t._v("、"),s("code",[t._v("/node1/app0000000002")]),t._v(" 。")]),t._v(" "),s("li",[s("strong",[t._v("临时顺序（EPHEMERAL_SEQUENTIAL）节点")]),t._v("：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。")])]),t._v(" "),s("p",[t._v("可以看出，临时节点相比持久节点，最主要的是对会话失效的情况处理不一样，临时节点会话消失则对应的节点消失。这样的话，如果客户端发生异常导致没来得及释放锁也没关系，会话失效节点自动被删除，不会发生死锁的问题。")]),t._v(" "),s("p",[t._v("使用 Redis 实现分布式锁的时候，我们是通过过期时间来避免锁无法被释放导致死锁问题的，而 ZooKeeper 直接利用临时节点的特性即可。")]),t._v(" "),s("p",[t._v("假设不使用顺序节点的话，所有尝试获取锁的客户端都会对持有锁的子节点加监听器。当该锁被释放之后，势必会造成所有尝试获取锁的客户端来争夺锁，这样对性能不友好。使用顺序节点之后，只需要监听前一个节点就好了，对性能更友好。")]),t._v(" "),s("h2",{attrs:{id:"为什么要设置对前一个节点的监听"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要设置对前一个节点的监听"}},[t._v("#")]),t._v(" 为什么要设置对前一个节点的监听？")]),t._v(" "),s("blockquote",[s("p",[t._v("Watcher（事件监听器），是 ZooKeeper 中的一个很重要的特性。ZooKeeper 允许用户在指定节点上注册一些  Watcher，并且在一些特定事件触发的时候，ZooKeeper 服务端会将事件通知到感兴趣的客户端上去，该机制是 ZooKeeper  实现分布式协调服务的重要特性。")])]),t._v(" "),s("p",[t._v("同一时间段内，可能会有很多客户端同时获取锁，但只有一个可以获取成功。如果获取锁失败，则说明有其他的客户端已经成功获取锁。获取锁失败的客户端并不会不停地循环去尝试加锁，而是在前一个节点注册一个事件监听器。")]),t._v(" "),s("p",[t._v("这个事件监听器的作用是："),s("strong",[t._v("当前一个节点对应的客户端释放锁之后（也就是前一个节点被删除之后，监听的是删除事件），通知获取锁失败的客户端（唤醒等待的线程，Java 中的 "),s("code",[t._v("wait/notifyAll")]),t._v(" ），让它尝试去获取锁，然后就成功获取锁了。")])]),t._v(" "),s("h2",{attrs:{id:"如何实现可重入锁-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现可重入锁-2"}},[t._v("#")]),t._v(" 如何实现可重入锁？")]),t._v(" "),s("p",[t._v("这里以 Curator 的 "),s("code",[t._v("InterProcessMutex")]),t._v(" 对可重入锁的实现来介绍（源码地址："),s("a",{attrs:{href:"https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fapache%2Fcurator%2Fblob%2Fmaster%2Fcurator-recipes%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcurator%2Fframework%2Frecipes%2Flocks%2FInterProcessMutex.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("InterProcessMutex.java"),s("OutboundLink")],1),t._v("）。")]),t._v(" "),s("p",[t._v("当我们调用 "),s("code",[t._v("InterProcessMutex#acquire")]),t._v("方法获取锁的时候，会调用"),s("code",[t._v("InterProcessMutex#internalLock")]),t._v("方法。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取可重入互斥锁，直到获取成功为止")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("acquire")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("internalLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Lost connection while trying to acquire lock: "')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" basePath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("internalLock")]),t._v(" 方法会先获取当前请求锁的线程，然后从 "),s("code",[t._v("threadData")]),t._v("( "),s("code",[t._v("ConcurrentMap<Thread, LockData>")]),t._v(" 类型)中获取当前线程对应的 "),s("code",[t._v("lockData")]),t._v(" 。 "),s("code",[t._v("lockData")]),t._v(" 包含锁的信息和加锁的次数，是实现可重入锁的关键。")]),t._v(" "),s("p",[t._v("第一次获取锁的时候，"),s("code",[t._v("lockData")]),t._v("为 "),s("code",[t._v("null")]),t._v("。获取锁成功之后，会将当前线程和对应的 "),s("code",[t._v("lockData")]),t._v(" 放到 "),s("code",[t._v("threadData")]),t._v(" 中")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("internalLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前请求锁的线程")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" currentThread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 拿对应的 lockData")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockData")]),t._v(" lockData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" threadData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一次获取锁的话，lockData 为 null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lockData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前线程获取过一次锁之后")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为当前线程的锁存在， lockCount 自增后返回，实现锁重入.")]),t._v("\n    lockData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lockCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incrementAndGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试获取锁")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lockPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" internals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("attemptLock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLockNodeBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lockPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockData")]),t._v(" newLockData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lockPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取锁成功之后，将当前线程和对应的 lockData 放到 threadData 中")]),t._v("\n    threadData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newLockData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("LockData")]),t._v("是 "),s("code",[t._v("InterProcessMutex")]),t._v("中的一个静态内部类。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" threadData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Maps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newConcurrentMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockData")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前持有锁的线程")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" owningThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 锁对应的子节点")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lockPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加锁的次数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" lockCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" owningThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lockPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("owningThread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" owningThread"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lockPath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" lockPath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果已经获取过一次锁，后面再来获取锁的话，直接就会在 "),s("code",[t._v("if (lockData != null)")]),t._v(" 这里被拦下了，然后就会执行"),s("code",[t._v("lockData.lockCount.incrementAndGet();")]),t._v(" 将加锁次数加 1。")]),t._v(" "),s("p",[t._v("整个可重入锁的实现逻辑非常简单，直接在客户端判断当前线程有没有获取锁，有的话直接将加锁次数加 1 就可以了。")]),t._v(" "),s("h1",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("这篇文章我们介绍了实现分布式锁的两种常见方式。至于具体选择 Redis 还是 ZooKeeper  来实现分布式锁，还是要看业务的具体需求。如果对性能要求比较高的话，建议使用 Redis 实现分布式锁。如果对可靠性要求比较高的话，建议使用  ZooKeeper 实现分布式锁。")]),t._v(" "),s("h1",{attrs:{id:"reference"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" reference")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/jelly12345/p/14699492.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("redisson中的看门狗机制总结 - 郭慕荣 - 博客园"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/1963942081zzx/p/17286184.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis 使用Redisson+Rlock实现分布式锁 - 学无止境，贵在当下 - 博客园"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://javaguide.cn/distributed-system/distributed-lock-implementations.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("分布式锁常见实现方案总结"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/keeya/p/14332131.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redisson 分布式锁实战与 watch dog 机制解读 - 上帝爱吃苹果-Soochow - 博客园"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);