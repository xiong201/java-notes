(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{377:function(t,v,_){"use strict";_.r(v);var r=_(7),s=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("设计模式是程序员在面对同类软件工程设计问题所总结出来的有用经验，是"),v("strong",[t._v("某类问题的通用解决方案")]),t._v("。")]),t._v(" "),v("h1",{attrs:{id:"七大设计原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七大设计原则"}},[t._v("#")]),t._v(" 七大设计原则")]),t._v(" "),v("p",[t._v("设计模式常用的七大原则有：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("单一职责原则")]),t._v(" "),v("th",[t._v("一个类应该只负责一项职责")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("接口隔离原则")]),t._v(" "),v("td",[t._v("一个类对另一个类的依赖应该建立在最小接口上")])]),t._v(" "),v("tr",[v("td",[t._v("依赖倒转（倒置）原则")]),t._v(" "),v("td",[t._v("高层模块不应该依赖底层模块，二者都应该依赖抽象。")])]),t._v(" "),v("tr",[v("td",[t._v("里氏替换原则")]),t._v(" "),v("td",[t._v("所有引用基类的地方必须能透明地使用其子类的对象")])]),t._v(" "),v("tr",[v("td",[t._v("开闭原则")]),t._v(" "),v("td",[t._v("一个软件实体如类、模块和函数应该对扩展（提供方）开放，对修改（使用方）关闭")])]),t._v(" "),v("tr",[v("td",[t._v("迪米特原则")]),t._v(" "),v("td",[t._v("一个类对自己依赖的类知道的越少越好")])]),t._v(" "),v("tr",[v("td",[t._v("合成复用原则")]),t._v(" "),v("td",[t._v("尽量使用合成/聚合，而不是通过继承达到复用的目的。")])])])]),t._v(" "),v("h1",{attrs:{id:"设计模式分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式分类"}},[t._v("#")]),t._v(" 设计模式分类")]),t._v(" "),v("p",[t._v("设计模式分为三大类，总共有23种模式。具体分类：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("创建型模式")]),t._v("：单例模式、抽象工厂模式、原型模式、建造者模式、工厂方法模式。")]),t._v(" "),v("li",[v("strong",[t._v("结构型模式")]),t._v("：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。")]),t._v(" "),v("li",[v("strong",[t._v("行为型模式")]),t._v("：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式（责任链模式）")])])])}),[],!1,null,null,null);v.default=s.exports}}]);