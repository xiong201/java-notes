(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{363:function(v,_,a){"use strict";a.r(_);var t=a(7),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[_("strong",[v._v("为什么要进行JVM调优")]),v._v("？")]),v._v(" "),_("p",[v._v("调优的最终目的都是为了应用程序使用最小的硬件消耗来承载更大的吞吐量。")]),v._v(" "),_("p",[v._v("jvm调优主要是针对垃圾收集器的收集性能优化，"),_("strong",[v._v("减少GC的频率和Full GC的次数")]),v._v("，令运行在虚拟机上的应用能够使用更少的内存以及延迟获取"),_("strong",[v._v("更大的吞吐量")]),v._v("和"),_("strong",[v._v("减少暂停时间")]),v._v("。")]),v._v(" "),_("p",[_("strong",[v._v("什么时候进行JVM调优?")])]),v._v(" "),_("ol",[_("li",[v._v("系统吞吐量与响应性能不高或下降；")]),v._v(" "),_("li",[v._v("Heap内存（老年代）持续上涨达到设置的最大内存值；")]),v._v(" "),_("li",[v._v("Full GC 次数频繁；")]),v._v(" "),_("li",[v._v("GC 停顿时间过长（超过 1 秒）；")]),v._v(" "),_("li",[v._v("应用出现OutOfMemory 等内存异常；")]),v._v(" "),_("li",[v._v("应用中有使用本地缓存且占用大量内存空间；")])]),v._v(" "),_("p",[_("strong",[v._v("调优调什么？")])]),v._v(" "),_("p",[v._v("内存分配+垃圾回收")]),v._v(" "),_("ol",[_("li",[v._v("合理使用堆内存")]),v._v(" "),_("li",[v._v("GC高效回收占用的内存的垃圾对象")]),v._v(" "),_("li",[v._v("GC高效释放掉内存空间")])]),v._v(" "),_("h2",{attrs:{id:"调优原则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优原则"}},[v._v("#")]),v._v(" 调优原则")]),v._v(" "),_("ul",[_("li",[v._v("优先原则：优先架构调优和代码调优，JVM优化是不得已的手段\n"),_("ul",[_("li",[v._v("大多数的Java应用不需要进行JVM优化")])])]),v._v(" "),_("li",[v._v("观测性原则：发现问题解决问题，没有问题不找问题")])]),v._v(" "),_("h2",{attrs:{id:"调优关键指标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优关键指标"}},[v._v("#")]),v._v(" 调优关键指标")]),v._v(" "),_("h3",{attrs:{id:"吞吐量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#吞吐量"}},[v._v("#")]),v._v(" 吞吐量")]),v._v(" "),_("p",[v._v("重要指标之一，"),_("strong",[v._v("吞吐量是衡量系统在单位时间里面完成的工作数量")]),v._v("。吞吐量需求通常忽略延迟或者响应时间。通常情况下，提升吞吐量需要以系统响应变慢和更多内存消耗作为代价。")]),v._v(" "),_("ul",[_("li",[v._v("TPS：每秒事务数")]),v._v(" "),_("li",[v._v("Throughput：吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间），虚拟机总共运行了 100 分钟，其中垃圾收集花掉 1 分钟，那吞吐量就是99%。")])]),v._v(" "),_("h3",{attrs:{id:"延迟或响应时间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#延迟或响应时间"}},[v._v("#")]),v._v(" 延迟或响应时间")]),v._v(" "),_("p",[_("strong",[v._v("延迟或者响应时间是衡量应用从接收到一个任务到完成这个任务消耗的时间")]),v._v("。一个延迟或者响应时间的需求需要忽略吞吐量。通常来讲，提升应用的响应时间需要以更低吞吐量或提高应用的内存消耗。")]),v._v(" "),_("h3",{attrs:{id:"内存占用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存占用"}},[v._v("#")]),v._v(" 内存占用")]),v._v(" "),_("p",[v._v("内存占用是衡量应用消耗的内存，这个内存占用是指应用在运行在某一个吞吐量、延迟以及可用性和易管理性指标下的内存消耗，内存占用是通常描述为应用运行的时候Java堆的大小或者总共需要消耗内存。")]),v._v(" "),_("h1",{attrs:{id:"jvm调优主要步骤"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优主要步骤"}},[v._v("#")]),v._v(" JVM调优主要步骤")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("第一步：监控分析GC日志")])]),v._v(" "),_("li",[_("p",[v._v("第二步：判断JVM问题：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化")])]),v._v(" "),_("li",[_("p",[v._v("如果GC时间超过1-3秒，或者频繁GC，则必须优化。")])])])]),v._v(" "),_("li",[_("p",[v._v("第三步：确定调优目标")])]),v._v(" "),_("li",[_("p",[v._v("第四步：调整参数")]),v._v(" "),_("ul",[_("li",[v._v("调优一般是从满足程序的内存使用需求开始，之后是时间延迟要求，最后才是吞吐量要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。")])])]),v._v(" "),_("li",[_("p",[v._v("第五步：对比调优前后差距")])]),v._v(" "),_("li",[_("p",[v._v("第六步：重复： 1 、 2 、 3 、 4 、 5 步骤")]),v._v(" "),_("ul",[_("li",[v._v("找到最佳JVM参数设置")])])]),v._v(" "),_("li",[_("p",[v._v("第七步：应用JVM到应用服务器：")]),v._v(" "),_("ul",[_("li",[v._v("找到最合适的参数，将这些参数应用到所有服务器，并进行后续跟踪。")])])])]),v._v(" "),_("h1",{attrs:{id:"jvm调优实践"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优实践"}},[v._v("#")]),v._v(" JVM调优实践")]),v._v(" "),_("h2",{attrs:{id:"分析gc日志"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分析gc日志"}},[v._v("#")]),v._v(" 分析GC日志")]),v._v(" "),_("h3",{attrs:{id:"初始参数设置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#初始参数设置"}},[v._v("#")]),v._v(" 初始参数设置")]),v._v(" "),_("p",[v._v("Jvm调优典型参数设置;")]),v._v(" "),_("ol",[_("li",[_("p",[v._v("-Xms堆内存的最小值：")]),v._v(" "),_("ul",[_("li",[v._v("默认情况下，当堆中可用内存小于40%时，堆内存会开始增加，一直增加到-Xmx的大小。")])])]),v._v(" "),_("li",[_("p",[v._v("-Xmx堆内存的最大值：")]),v._v(" "),_("p",[v._v("默认值是总内存/64（且小于1G）")]),v._v(" "),_("ul",[_("li",[v._v("默认情况下，当堆中可用内存大于70%时，堆内存会开始减少，一直减小到-Xms的大小；")])])]),v._v(" "),_("li",[_("p",[v._v("-Xmn新生代内存的最大值：")]),v._v(" "),_("ul",[_("li",[v._v("1.包括Eden区和两个Survivor区的总和")]),v._v(" "),_("li",[v._v("2.配置写法如：-Xmn1024k，-Xmn1024m，-Xmn1g")])])]),v._v(" "),_("li",[_("p",[v._v("-Xss每个线程的栈内存：")]),v._v(" "),_("ul",[_("li",[v._v("默认1M，一般来说是不需要改。线程栈越小意味着可以创建的线程数越多")])])])]),v._v(" "),_("p",[v._v("整个堆的大小 = 年轻代大小 + 年老代大小，堆的大小不包含元空间大小，如果增大了年轻代，年老代相应就会减小，官方默认的配置为年老代大小/年轻代大小=2/1左右；")]),v._v(" "),_("p",[v._v("建议在开发测试环境可以用Xms和Xmx分别设置最小值最大值，但是在线上生产环境，"),_("strong",[v._v("Xms和Xmx设置的值必须一样，防止抖动")])]),v._v(" "),_("p",[v._v("默认的配置是否存在性能瓶颈。如果想要确定JVM性能问题瓶颈，需要进一步分析"),_("strong",[v._v("GC日志")])]),v._v(" "),_("ol",[_("li",[_("p",[_("strong",[v._v("-XX:+PrintGCDetails")]),v._v(" 开启GC日志创建更详细的GC日志 ，默认情况下，GC日志是关闭的")])]),v._v(" "),_("li",[_("p",[v._v("-XX:+PrintGCTimeStamps，-XX:+PrintGCDateStamps")]),v._v(" "),_("p",[v._v("开启GC时间提示")]),v._v(" "),_("ul",[_("li",[v._v("开启时间便于我们更精确地判断几次GC操作之间的时两个参数的区别")]),v._v(" "),_("li",[v._v("时间戳是相对于 0 （依据JVM启动的时间）的值，而日期戳（date stamp）是实际的日期字符串")]),v._v(" "),_("li",[v._v("由于日期戳需要进行格式化，所以它的效率可能会受轻微的影响，不过这种操作并不频繁，它造成的影响也很难被我们感知。")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("-XX:+PrintHeapAtGC")]),v._v(" 打印堆的GC日志")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("-Xloggc:./logs/gc.log")]),v._v(" 指定GC日志路径")])])]),v._v(" "),_("p",[v._v("这里，我们是在window下面进行测试，idea配置如下：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406084552942.png",alt:"image-20230406084552942"}})]),v._v(" "),_("blockquote",[_("p",[v._v("-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintHeapAtGC -Xloggc:E:/logs/gc-default.log")]),v._v(" "),_("p",[v._v("这样就会在e盘下logs文件夹下面，生成gc-default.log日志")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406084633483.png",alt:"image-20230406084633483"}})]),v._v(" "),_("h3",{attrs:{id:"gc日志解读"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gc日志解读"}},[v._v("#")]),v._v(" GC日志解读")]),v._v(" "),_("p",[_("strong",[v._v("Young GC 日志含义")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("2022-08-05T13:45:23.336+0800: 4.866: [GC (Metadata GC Threshold) [PSYoungGen: 136353K->20975K(405504K)] 160049K->48437K(720384K), 0.0092260 secs] [Times: user=0.00 sys=0.02, real=0.02 secs] \n\n")])])]),_("p",[v._v("这里的内容，我们一个一个解析：")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("2022-08-05T13:45:23.336+0800: 本次GC发生时间\n4.866: 举例启动应用的时间\n[GC【表示GC的类型，youngGC】 (Metadata GC Threshold) 元空间超阈值\n[PSYoungGen: 136353K->20975K(405504K年轻代总空间)] 160049K->48437K(720384K)整堆), 0.0092260 secs本次垃圾回收耗时]\n[Times: user=0.00本次GC消耗CPU的时间 sys=0.02系统暂停时间, real=0.02 secs实际应用暂停时间]\n\n\n")])])]),_("p",[_("strong",[v._v("FullGC 日志含义")])]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("2022-08-05T20:24:47.815+0800: 6.955: [Full GC (Metadata GC Threshold) [PSYoungGen: 701K->0K(72704K)] [ParOldGen: 38678K->35960K(175104K)] 39380K->35960K(247808K), [Metaspace: 56706K->56706K(1099776K)], 0.1921975 secs] [Times: user=1.03 sys=0.00, real=0.19 secs] \n\n")])])]),_("p",[v._v("这里的内容，我们也是一个一个解析：")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("2022-08-05T20:24:47.815+0800:\n6.955: 刚启动服务就Full GC【整堆回收！！】\n\n[Full GC (Metadata GC Threshold) Metaspace空间超限！\n[PSYoungGen: 701K->0K(72704K)] 年轻代没有回收空间\n[ParOldGen: 38678K->35960K(175104K)] 39380K->35960K(247808K), 老年代也没有到阈值，整堆更没有到阈值\n[Metaspace: 56706K->56706K(1099776K)], 0.1921975 secs]\n[Times: user=1.03本次GC消耗CPU的时间 sys=0.00系统暂停时间, real=0.19 secs实际应用暂停时间] \n\n\n")])])]),_("h3",{attrs:{id:"gc日志可视化分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gc日志可视化分析"}},[v._v("#")]),v._v(" GC日志可视化分析")]),v._v(" "),_("p",[v._v("分析GC日志，就必须让GC日志输出到一个文件中，然后使用GC日志分析工具（"),_("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fgceasy.io%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("gceasy.io/"),_("OutboundLink")],1),v._v(") 进行分析")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230406085019343.png",alt:"image-20230406085019343"}})]),v._v(" "),_("blockquote",[_("p",[v._v("这里分析完之后，可以下载分析报告")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/2b293a5a6ca84a0aae0ec64761ef2b40tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.png",alt:"image.png"}})]),v._v(" "),_("h5",{attrs:{id:"_1-jvm内存占用情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-jvm内存占用情况"}},[v._v("#")]),v._v(" "),_("strong",[v._v("1) JVM内存占用情况：")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/a24c12ee4f6643e7a60c95bdc34d5ac0tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.png",alt:"image.png"}})]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("Generation【区域】")]),v._v(" "),_("th",[v._v("Allocated【最大值】")]),v._v(" "),_("th",[v._v("Peak【占用峰值】")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Young Generation【年轻代】")]),v._v(" "),_("td",[v._v("74.5 mb")]),v._v(" "),_("td",[v._v("74.47 mb")])]),v._v(" "),_("tr",[_("td",[v._v("Old Generation【老年轻代】")]),v._v(" "),_("td",[v._v("171 mb")]),v._v(" "),_("td",[v._v("95.62 mb")])]),v._v(" "),_("tr",[_("td",[v._v("Meta Space【元空间】")]),v._v(" "),_("td",[v._v("1.05 gb")]),v._v(" "),_("td",[v._v("55.38 mb")])]),v._v(" "),_("tr",[_("td",[v._v("Young + Old + Meta space【整体】")]),v._v(" "),_("td",[v._v("1.3 gb")]),v._v(" "),_("td",[v._v("212.64 mb")])])])]),v._v(" "),_("h5",{attrs:{id:"_2-关键性能指标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-关键性能指标"}},[v._v("#")]),v._v(" 2) 关键性能指标：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/9dbf678711824ada8fdfb501f7fe9f9btplv-k3u1fbpfcp-zoom-in-crop-mark3024000.png",alt:"image.png"}})]),v._v(" "),_("p",[v._v("1 、"),_("strong",[v._v("吞吐量")]),v._v("： 百分比越高表明GC开销越低。这个指标反映了JVM的吞吐量。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("Throughput")]),v._v("："),_("strong",[v._v("97.043%")])])]),v._v(" "),_("p",[v._v("2 、"),_("strong",[v._v("GC 延迟")]),v._v("："),_("strong",[v._v("Latency")])]),v._v(" "),_("ul",[_("li",[v._v("Avg Pause GC Time： "),_("strong",[v._v("7.80 ms")]),v._v(" 平均GC暂停时间")]),v._v(" "),_("li",[v._v("Max Pause GC Time： "),_("strong",[v._v("190 ms")]),v._v(" 最大GC暂停时间")])]),v._v(" "),_("h5",{attrs:{id:"_3-gc-可视化交互聚合结果"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-gc-可视化交互聚合结果"}},[v._v("#")]),v._v(" 3) GC 可视化交互聚合结果")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/d19031e350f34659b8aa5c7430c3c7f7tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.png",alt:"image.png"}})]),v._v(" "),_("p",[v._v("由上图可以看到，发生了3次full gc")]),v._v(" "),_("p",[v._v("存在问题：一开始就发生了 3 次full gc , 很明显不太正常；")]),v._v(" "),_("h5",{attrs:{id:"_4-gc-统计"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-gc-统计"}},[v._v("#")]),v._v(" 4) GC 统计")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/2f1c011b51fd4fdf808437dc1a9e1dactplv-k3u1fbpfcp-zoom-in-crop-mark3024000.png",alt:"image.png"}})]),v._v(" "),_("p",[_("strong",[v._v("GC Statistics")]),v._v("：GC统计")]),v._v(" "),_("p",[v._v("由上图可以得到，发生gc的总次数，young gc，full gc的统计，gc 暂停时间统计。")]),v._v(" "),_("h5",{attrs:{id:"_5-gc原因"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-gc原因"}},[v._v("#")]),v._v(" 5) GC原因：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/af5507e153fb473a836ada80f8461a4ftplv-k3u1fbpfcp-zoom-in-crop-mark3024000.png",alt:"image.png"}})]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("原因")]),v._v(" "),_("th",[v._v("次数")]),v._v(" "),_("th",[v._v("平均时间")]),v._v(" "),_("th",[v._v("最大时间")]),v._v(" "),_("th",[v._v("总耗时")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Metadata GC Threshold")]),v._v(" "),_("td",[v._v("6")]),v._v(" "),_("td",[v._v("43.3 ms")]),v._v(" "),_("td",[v._v("190 ms")]),v._v(" "),_("td",[v._v("260 ms")])]),v._v(" "),_("tr",[_("td",[v._v("Allocation Failure")]),v._v(" "),_("td",[v._v("53")]),v._v(" "),_("td",[v._v("3.77 ms")]),v._v(" "),_("td",[v._v("10.0 ms")]),v._v(" "),_("td",[v._v("200 ms")])])])]),v._v(" "),_("p",[v._v("这里对这些原因解析一下：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("Metadata GC Threshold")]),v._v("： 元空间超阈值")]),v._v(" "),_("li",[_("strong",[v._v("Allocation Failure")]),v._v(" ：年轻代空间不足")])]),v._v(" "),_("blockquote",[_("p",[v._v("这里补充一个原因，本案例还没出现的")])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("strong",[v._v("Ergonomics")]),v._v("：译文是“人体工程学”，GC中的Ergonomics含义是负责自动调解gc暂停时间和吞吐量之间平衡从而产生的GC。目的是使得虚拟机性能更好的一种做法。")])]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("由此可见，通过可视化的工具，可以快速的帮我们分析GC的日志。我们得善于利用工具。")]),v._v(" "),_("p",[v._v("因为gc的日志文件，内容太多，都是密密麻麻的数字，文本。看得实在是头疼。")]),v._v(" "),_("p",[v._v("有了"),_("strong",[v._v("gc easy")]),v._v("可视化工具，而且还是在线的，十分的方便。"),_("strong",[v._v("GC日志分析是免费的")])]),v._v(" "),_("h2",{attrs:{id:"堆内存与元空间优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆内存与元空间优化"}},[v._v("#")]),v._v(" 堆内存与元空间优化")]),v._v(" "),_("p",[v._v("元空间默认初始大小为20.75MB，"),_("strong",[v._v("调整元空间大小需要Full GC")]),v._v("。对于8G物理内存的机器来说，一般将这两个值都设置为256M（可根据时间情况进行调整）。")]),v._v(" "),_("p",[v._v("元空间优化："),_("strong",[v._v("Metaspace")]),v._v(" 太小，会频繁触发Full GC。增加"),_("strong",[v._v("Metaspace")]),v._v("空间大小。参数-XX:MetaspaceSize=N，设置元空间大小为128MB。")]),v._v(" "),_("p",[v._v("堆内存：参数-Xms和-Xmx。增大堆内存。增加年轻代和老年代的空间，减少GC")]),v._v(" "),_("h2",{attrs:{id:"堆内存内部优化-新生代和老年代比例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#堆内存内部优化-新生代和老年代比例"}},[v._v("#")]),v._v(" 堆内存内部优化：新生代和老年代比例")]),v._v(" "),_("p",[v._v("年轻代和老年代大小默认比例： 1 : 2。默认比例大部分都是最合适的。")]),v._v(" "),_("p",[v._v("使用-XX:NewRetio = 4 表示young和old所占比值为1:4。年轻代设置太小，young gc次数变多了，这也有点影响性能。")]),v._v(" "),_("blockquote",[_("p",[v._v("避免新生代设置过小，当新生代设置过小时，会产生两种比较明显的现象，一是minor GC次数频繁，二是可能导致 minor GC对象直接进入老年代。当老年代内存不足时，会触发Full GC。")]),v._v(" "),_("p",[v._v("避免新生代设置过大，当新生代设置过大时，会带来两个问题：一是老年大变小，可能导致FullGC频繁执行；二是 minor GC 执行回收的时间大幅度增加。")])]),v._v(" "),_("h2",{attrs:{id:"垃圾回收器优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器优化"}},[v._v("#")]),v._v(" 垃圾回收器优化")]),v._v(" "),_("p",[v._v("吞吐量优化ps+po：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("Perallel-Scavenge垃圾收集器："),_("code",[v._v("-XX:+UsePerallelGC")])])]),v._v(" "),_("li",[_("p",[v._v("Perallel-Old垃圾收集器【po是ps的老年代并行收集版本】："),_("code",[v._v("-XX：+UsePerallelOldGC")])])])]),v._v(" "),_("p",[v._v("响应时间优先parnew+cms：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("ParNew垃圾收集器【Serial的收集器的多线程版本】："),_("code",[v._v("-XX:UseParNewGC")])])]),v._v(" "),_("li",[_("p",[v._v("CMS垃圾收集器： 并发 收集器(非独占式)"),_("code",[v._v("-XX:ConcMarkSweepGC")]),v._v("【并发的标记清楚算法的GC垃圾收集器】")])])]),v._v(" "),_("h3",{attrs:{id:"g1垃圾收集器-重点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾收集器-重点"}},[v._v("#")]),v._v(" G1垃圾收集器（重点）")]),v._v(" "),_("p",[v._v("G1中提供了三种模式垃圾回收模式， "),_("strong",[v._v("Young GC、Mixed GC 和 Full GC")]),v._v(" ，在不同的条件下被触发。")]),v._v(" "),_("p",[v._v("G1的使用步骤：")]),v._v(" "),_("ul",[_("li",[v._v("配置开启G1")]),v._v(" "),_("li",[v._v("设置堆的最大内存")]),v._v(" "),_("li",[v._v("设置GC最大暂停时间：设置100-300之间是比较合理：\n"),_("ul",[_("li",[v._v("如果设置的GC的暂停时间比较小，系统吞吐量会降低")]),v._v(" "),_("li",[v._v("默认的值是200,")]),v._v(" "),_("li",[v._v("G1设计的目标：控制用户线程执行时间90%，GC占比时间10%")])])])]),v._v(" "),_("h4",{attrs:{id:"g1垃圾收集器的工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1垃圾收集器的工作原理"}},[v._v("#")]),v._v(" G1垃圾收集器的工作原理")]),v._v(" "),_("p",[v._v("G1垃圾收集器相对比其他收集器而言，最大的区别在于它取消了 "),_("strong",[v._v("年轻代、老年代的物理划分，")]),v._v(" 取而代之的是将堆划分为若干个区域（Region），这些区域中包含了有逻辑上的年轻代、老年代区域。")]),v._v(" "),_("p",[v._v("这样做的好处就是，我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。")]),v._v(" "),_("p",[v._v("在G1划分的区域中，年轻代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。")]),v._v(" "),_("p",[v._v("这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。")]),v._v(" "),_("p",[v._v("Young GC主要是对Eden区进行GC，它在Eden空间耗尽时会被触发。")]),v._v(" "),_("p",[v._v("Mixed GC：回收年轻代内存，同时也回收部分老年代的内存")]),v._v(" "),_("p",[_("strong",[v._v("MixedGC什么时候触发？")])]),v._v(" "),_("p",[_("code",[v._v("-XX:InitiatingHeapOccupancyPercent=n")]),v._v(" ，设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。")]),v._v(" "),_("p",[v._v("MixedGC主要分为两步：")]),v._v(" "),_("ol",[_("li",[v._v("全局并发标记")]),v._v(" "),_("li",[v._v("拷贝存活对象")])]),v._v(" "),_("h4",{attrs:{id:"g1收集器相关参数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器相关参数"}},[v._v("#")]),v._v(" G1收集器相关参数")]),v._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("# 使用 G1 垃圾收集器\n-XX:+UseG1GC\n\n# 设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到），默认值是 200 毫秒。\n-XX:MaxGCPauseMillis=\n\n# 设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。\n# 默认是堆内存的1/2000。\n-XX:G1HeapRegionSize=n\n\n# 设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。\n-XX:ParallelGCThreads=n\n\n# 设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads)的 1/4 左右。\n-XX:ConcGCThreads=n\n\n# 设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。\n-XX:InitiatingHeapOccupancyPercent=n\n")])])]),_("h1",{attrs:{id:"jvm调优案例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优案例"}},[v._v("#")]),v._v(" JVM调优案例")]),v._v(" "),_("h2",{attrs:{id:"调优案例-metaspace导致频繁fgc问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优案例-metaspace导致频繁fgc问题"}},[v._v("#")]),v._v(" 调优案例：metaspace导致频繁FGC问题")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230405103943481.png",alt:"image-20230405103943481"}})]),v._v(" "),_("h2",{attrs:{id:"调优案例-ygg和old-gc频繁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优案例-ygg和old-gc频繁"}},[v._v("#")]),v._v(" 调优案例：YGG和OLD GC频繁")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/image-20230405105047198.png",alt:"image-20230405105047198"}})]),v._v(" "),_("h2",{attrs:{id:"调优案例-old-gc耗时较长影响业务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优案例-old-gc耗时较长影响业务"}},[v._v("#")]),v._v(" 调优案例：OLD GC耗时较长影响业务")]),v._v(" "),_("p",[v._v("原因：Remake阶段时间较长")]),v._v(" "),_("p",[v._v("优化：-XX:+CMSScavengeBeforeRemark")]),v._v(" "),_("h2",{attrs:{id:"调优案例-ygc耗时增加"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优案例-ygc耗时增加"}},[v._v("#")]),v._v(" 调优案例：YGC耗时增加")]),v._v(" "),_("p",[v._v("原因：jackson进行反序列化时会将key进行String#intern，导致扫描时，GCRoot变大")]),v._v(" "),_("p",[v._v("解决：禁用jackson的String#intern")]),v._v(" "),_("h2",{attrs:{id:"调优案例-ycg次数增加"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#调优案例-ycg次数增加"}},[v._v("#")]),v._v(" 调优案例：YCG次数增加")]),v._v(" "),_("p",[v._v("原因：-XX：MaxGCPauseMillis参数时间设置过小，导致JVM降低年轻代region")]),v._v(" "),_("p",[v._v("解决：")]),v._v(" "),_("ol",[_("li",[v._v("调大-XX：MaxGCPauseMillis值")]),v._v(" "),_("li",[v._v("将年轻代region大小设置为固定值")])]),v._v(" "),_("p",[v._v("调优案例：")])])}),[],!1,null,null,null);_.default=s.exports}}]);