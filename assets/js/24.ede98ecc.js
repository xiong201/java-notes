(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{354:function(t,e,s){"use strict";s.r(e);var a=s(7),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"线程池介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程池介绍"}},[t._v("#")]),t._v(" 线程池介绍")]),t._v(" "),e("p",[t._v("线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如已完成任务的数量。")]),t._v(" "),e("p",[t._v("线程池的好处：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("降低资源消耗")]),t._v("。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。")]),t._v(" "),e("li",[e("strong",[t._v("提高响应速度")]),t._v("。当任务到达时，任务可以不需要等到线程创建就能立即执行。")]),t._v(" "),e("li",[e("strong",[t._v("提高线程的可管理性")]),t._v("。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),t._v(" "),e("p",[e("strong",[t._v("线程池一般用于执行多个不相关联的耗时任务，没有多线程的情况下，任务顺序执行，使用了线程池的话可让多个不相关联的任务同时执行。")])]),t._v(" "),e("h1",{attrs:{id:"线程池创建的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程池创建的两种方式"}},[t._v("#")]),t._v(" 线程池创建的两种方式")]),t._v(" "),e("p",[e("strong",[t._v("方式一：通过"),e("code",[t._v("ThreadPoolExecutor")]),t._v("构造函数来创建（推荐）。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/threadpoolexecutor%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-d54a5992.jpg",alt:"threadpoolexecutor构造函数-d54a5992"}})]),t._v(" "),e("p",[e("strong",[t._v("方式二：通过 "),e("code",[t._v("Executor")]),t._v(" 框架的工具类 "),e("code",[t._v("Executors")]),t._v(" 来创建。")])]),t._v(" "),e("p",[t._v("我们可以创建多种类型的 "),e("code",[t._v("ThreadPoolExecutor")]),t._v("：")]),t._v(" "),e("ul",[e("li",[e("strong",[e("code",[t._v("FixedThreadPool")])]),t._v("：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("SingleThreadExecutor")]),t._v("：")]),t._v(" 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("CachedThreadPool")]),t._v("：")]),t._v(" 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("ScheduledThreadPool")])]),t._v("：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。")])]),t._v(" "),e("p",[t._v("对应 "),e("code",[t._v("Executors")]),t._v(" 工具类中的方法如图所示：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/executors-inner-threadpool.png",alt:"executors-inner-threadpool"}})]),t._v(" "),e("h1",{attrs:{id:"threadpoolexecutor-类介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor-类介绍"}},[t._v("#")]),t._v(" ThreadPoolExecutor 类介绍")]),t._v(" "),e("p",[t._v("线程池实现类 "),e("code",[t._v("ThreadPoolExecutor")]),t._v(" 是 "),e("code",[t._v("Executor")]),t._v(" 框架最核心的类。")]),t._v(" "),e("h2",{attrs:{id:"构造方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),e("p",[e("code",[t._v("ThreadPoolExecutor")]),t._v(" 类中提供的四个构造方法。我们来看最长的那个，其余三个都是在这个构造方法的基础上产生")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 用给定的初始参数创建一个新的ThreadPoolExecutor。\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程池的核心线程数量")]),t._v("\n                          "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程池的最大线程数")]),t._v("\n                          "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当线程数大于核心线程数时，多余的空闲线程存活的最长时间")]),t._v("\n                          "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//时间单位")]),t._v("\n                          "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务队列，用来储存等待执行任务的队列")]),t._v("\n                          "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//线程工厂，用来创建线程，一般默认即可")]),t._v("\n                          "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务")]),t._v("\n                           "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n        maximumPoolSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n        maximumPoolSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" corePoolSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n        keepAliveTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" threadFactory "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" handler "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NullPointerException")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("corePoolSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" corePoolSize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("maximumPoolSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" maximumPoolSize"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("workQueue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keepAliveTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toNanos")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("keepAliveTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("threadFactory "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" threadFactory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handler "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" handler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("strong",[e("code",[t._v("ThreadPoolExecutor")]),t._v(" 3 个最重要的参数：")])]),t._v(" "),e("ul",[e("li",[e("strong",[e("code",[t._v("corePoolSize")]),t._v(" :")]),t._v(" 任务队列未达到队列容量时，最大可以同时运行的线程数量。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("maximumPoolSize")]),t._v(" :")]),t._v(" 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("workQueue")]),t._v(":")]),t._v(" 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。")])]),t._v(" "),e("p",[e("code",[t._v("ThreadPoolExecutor")]),t._v("其他常见参数 :")]),t._v(" "),e("ul",[e("li",[e("strong",[e("code",[t._v("keepAliveTime")])]),t._v(":线程池中的线程数量大于 "),e("code",[t._v("corePoolSize")]),t._v(" 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 "),e("code",[t._v("keepAliveTime")]),t._v("才会被回收销毁。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("unit")])]),t._v(" : "),e("code",[t._v("keepAliveTime")]),t._v(" 参数的时间单位。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("threadFactory")])]),t._v(" :executor 创建新线程的时候会用到。")]),t._v(" "),e("li",[e("strong",[e("code",[t._v("handler")])]),t._v(" :饱和策略。")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://notes-img2022.oss-cn-shenzhen.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%90%84%E4%B8%AA%E5%8F%82%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB-d65f3309.jpg",alt:"线程池各个参数之间的关系-d65f3309"}})]),t._v(" "),e("p",[e("strong",[e("code",[t._v("ThreadPoolExecutor")]),t._v(" 饱和策略定义:")])]),t._v(" "),e("p",[t._v("如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，"),e("code",[t._v("ThreadPoolTaskExecutor")]),t._v(" 定义一些策略:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("ThreadPoolExecutor.AbortPolicy")]),t._v("：抛出 "),e("code",[t._v("RejectedExecutionException")]),t._v("来拒绝新任务的处理。")]),t._v(" "),e("li",[e("code",[t._v("ThreadPoolExecutor.CallerRunsPolicy")]),t._v("：调用执行自己的线程运行任务，也就是直接在调用"),e("code",[t._v("execute")]),t._v("方法的线程中运行("),e("code",[t._v("run")]),t._v(")被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。")]),t._v(" "),e("li",[e("code",[t._v("ThreadPoolExecutor.DiscardPolicy")]),t._v("：不处理新任务，直接丢弃掉。")]),t._v(" "),e("li",[e("code",[t._v("ThreadPoolExecutor.DiscardOldestPolicy")]),t._v("：此策略将丢弃最早的未处理的任务请求。")])]),t._v(" "),e("h1",{attrs:{id:"线程池最佳实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程池最佳实践"}},[t._v("#")]),t._v(" 线程池最佳实践")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://javaguide.cn/java/concurrent/java-thread-pool-best-practices.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 线程池最佳实践"),e("OutboundLink")],1),t._v("这篇文章总结了一些使用线程池的时候应该注意的东西，实际项目使用线程池之前可以看看。")]),t._v(" "),e("h1",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),e("ul",[e("li",[t._v("https://javaguide.cn/java/concurrent/java-thread-pool-summary.html")])])])}),[],!1,null,null,null);e.default=r.exports}}]);